[{"path":"https://frankiecho.github.io/robust.prioritizr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to robust.prioritizr","title":"Contributing to robust.prioritizr","text":"First , thank considering contributing robust.prioritizr! ’s people like make R community great community!","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/CONTRIBUTING.html","id":"where-to-start","dir":"","previous_headings":"","what":"Where to start","title":"Contributing to robust.prioritizr","text":"many ways contribute robust.prioritizr, appreciate . ideas get started: Reporting bugs: find bug, please report GitHub issue tracker. Please include reproducible example can track bug. Suggesting features: idea new feature, please open issue GitHub issue tracker. ’d love hear ideas! Contributing code: ’d like contribute code, please open pull request. ’ve included guidelines help get started.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/CONTRIBUTING.html","id":"submitting-a-pull-request","dir":"","previous_headings":"","what":"Submitting a pull request","title":"Contributing to robust.prioritizr","text":"submitting pull request, please make sure changes well-tested. use testthat package testing, aim high level test coverage. can run tests locally running devtools::test() R console. also ask follow existing coding style. don’t formal style guide, please try match style surrounding code. Finally, please make sure pull request includes clear description changes ’ve made.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to robust.prioritizr","text":"Please note robust.prioritizr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/climate-sdm.html","id":"data-generating-process","dir":"Articles","previous_headings":"","what":"Data generating process","title":"Example using simulated data from a species distribution model","text":"Suppose analyst fitted following statistical model species abundance based data:  r_{ij} \\sim \\text{Poisson}(\\theta_{ij}) \\theta_{ij} = \\log(\\beta_0 + \\beta_1 Temp_i + \\beta_2 Temp_i^2 + \\beta_3 Prec_i + \\beta_4 Prec_i^2 + \\varepsilon_{ij}) abundance r species j location follows Poisson distribution mean \\theta, function climate covariates Temperature Temp Precipitation Prec random ..d. error term \\varepsilon. relationships climate variables mean modelled using regression coefficients \\beta_1, \\beta_2, \\beta_3, \\beta_4. simplicity, assume abundance depends two climatic variables. simulate abundance data two species follows: Species 1: species narrow climatic niche, best adapted habitats 18.5 Celsius 1000mm annual precipitation. expected abundance drops significantly climate move away 17.5C 1000mm annual precipitation. Species 2: species wider climatic niche, best adapted habitats 20 Celsius 1000mm annual precipitation. wider climatic niche, abundances still high temperature precipitation exceeds optimal values. , generate temperature precipitation values simulated landscape plot expected abundance respect temperature (holding precipitation constant). can see figure , Species 1 lower expected abundance, expected abundance declines rapidly temperature changes away optimal temperature.  simulated landscape, see range species 1 much smaller compared species 2, much narrower climatic range.  future climate change, temperature precipitation values likely change, resulting shift range species. scenario modelling community uses set standardized scenarios known Representative Concentration Pathways (RCPs) Shared Socioeconomic Pathways (SSPs) describe future changes climate, economic social variables. simplified example, demonstrate Robust Prioritizr can used conduct systematic conservation planning analyst predictions future species ranges across multiple climate scenarios. hypothetical example, lets assume temperature precipitation going change following ways: SSP1-RCP26: current (baseline) temperature precipitation values SSP2-RCP45: mild climate change, temperature increase 1 degrees Celsius, precipitation reduces 100mm relative baseline SSP4-RCP60: moderate climate change, temperature increase 2 degrees Celsius, precipitation increases 50mm average SSP5-RCP85: extreme climate change, temperature increase 3 degrees Celsius, precipitation reduces 150mm average Robust Prioritizr agnostic scenarios fed model, means analyst free specify scenarios names. figure , plot simulated abundances species 1 species 2 across four RCP-SSP pairings. climatic range Species 1 particular small highly sensitive future climate scenario. case, can analyst design protected area network accounts future changes climate niches? plot(abundance_rast)","code":"set.seed(19895894) N <- 10  # Prepare baseline temperature and precipitation simulated data m <- expand.grid(prec = seq(900, 1200, length.out = N),                  temp = seq(16, 20, length.out = N))  temp <- matrix(m$temp + rnorm(N^2, 0, 0.2), N, N, byrow = TRUE) prec <- matrix(m$prec + rnorm(N^2, 0, 20), N, N, byrow = TRUE)  # Find the coefficients of the model given the optimal temp/ prec and shape of the quadratic function beta_coefs <- function(T_opt, P_opt, k_T, k_P, peak = 10) {   beta_0 <- log(peak) + T_opt^2 * k_T/2 + P_opt^2 * k_P/2   beta_1 <- -k_T * T_opt   beta_2 <- k_T/2   beta_3 <- -k_P * P_opt   beta_4 <- k_P / 2   return(cbind(beta_0, beta_1, beta_2, beta_3, beta_4)) }  # Specify climate abundance response function of the species, assume that its probability of occurrence # follow a multivariate Gaussian distribution of temperature and precipitation ab_function <- function(temp, prec, betas, sigma = 0, return_vec = F) {   t <- as.vector(temp)   p <- as.vector(prec)   model_matrix <- cbind(1, t, t^2, p, p^2)   betas <- as.vector(betas)    v <- exp(model_matrix %*% betas + rnorm(length(t))*sigma)   if (return_vec) return(as.vector(v))   return(matrix(v, nrow = nrow(temp), ncol = ncol(temp))) }  # Define function for drawing random abundance numbers based on expected abundance numbers rpois_matrix <- function(exp_ab) {   dim <- dim(exp_ab)   rpois(dim[1]*dim[2], as.vector(exp_ab)) %>%     matrix(nrow = dim[1], ncol = dim[2]) }  # Define a function that can draw abundance values based on temperature, precipitation and a matrix of beta ab_draw_pois <- function(t, p, beta) {   beta_rand <- as.vector(beta[sample(1:nrow(beta), 1),])   exp_ab <- function(t, p,...) ab_function(t, p, beta_rand,...)   rpois_matrix(exp_ab(temp, prec)) }   beta_species_1 <- beta_coefs(18.5, 1000, -.3, -.005, 10) beta_species_2 <- beta_coefs(20, 1000, -.1, -.0001, 8)  # Define functions for species 1 and 2, controlling mu for their optimal temperature and precipitation, # and sigma for the range it can survive in, Ntrials for scaling the absolute number of occurrences exp_ab_1 <- function(t, p,...) ab_function(t, p, beta_species_1,...) exp_ab_2 <- function(t, p, ...) ab_function(t, p, beta_species_2,...)  # Uncertainty in the beta parameters - suppose we estimate a model and get confidence intervals like this, use this later beta_species_dist_1 <- beta_coefs(18.5+rnorm(100), 1000+rnorm(100)*50, -.5, -.005, 10) beta_species_dist_2 <- beta_coefs(20+rnorm(100), 1000+rnorm(100)*50, -.1, -.0001, 8)  # Plot climate response of species 1 and 2 in terms of expected abundance x <- seq(10, 30, 0.01) resp_1 <- exp_ab_1(x, 1000, return_vec = T) resp_2 <- exp_ab_2(matrix(x), 1000, return_vec = T)  data.frame(x, resp_1, resp_2) %>%   pivot_longer(c('resp_1', 'resp_2')) %>%   mutate(name = factor(name, c('resp_1', 'resp_2'), c('Species 1', 'Species 2'))) %>%   ggplot(aes(x = x, y = value, color = name)) +   geom_line() +   theme_bw() +   labs(y = 'Expected abundance', x = 'Temperature') +   theme(panel.grid = element_blank()) +   ggtitle(\"Expected abundance of Species 1 and 2\") # Baseline occurrences for species 1 and 2 baseline_ab_1 <- rpois_matrix(exp_ab_1(temp, prec)) baseline_ab_2 <- rpois_matrix(exp_ab_2(temp, prec))  baseline_rast <- c(rast(temp), rast(prec), rast(baseline_ab_1), rast(baseline_ab_2)) names(baseline_rast) <- c(\"Temperature (C)\", \"Precipitation (mm)\", \"Abundance (Species 1)\", \"Abundance (Species 2)\") plot(baseline_rast) # Baseline temp and precipitation temp_ssp1_rcp26 <- temp prec_ssp1_rcp26 <- prec  # SSP2-RCP45 temp_ssp2_rcp45 <- temp + 1 + matrix(rnorm(N^2, sd = 0.2), N, N) prec_ssp2_rcp45 <- prec - 100 + matrix(rnorm(N^2, sd = 10), N, N)  # SSP4-RCP60 temp_ssp4_rcp60 <- temp + 2 + matrix(rnorm(N^2, sd = .2), N, N) prec_ssp4_rcp60 <- prec + 50 + matrix(rnorm(N^2, sd = 10), N, N)  # SSP5-RCP85 temp_ssp5_rcp85 <- temp + 4 + matrix(rnorm(N^2, sd = .2), N, N) prec_ssp5_rcp85 <- prec - 100 + matrix(rnorm(N^2, sd = 10), N, N)  # Simulate abundance levels given future climates ssp1_rcp26_ab_1 <- rpois_matrix(exp_ab_1(temp_ssp1_rcp26, prec_ssp1_rcp26)) ssp1_rcp26_ab_2 <- rpois_matrix(exp_ab_2(temp_ssp1_rcp26, prec_ssp1_rcp26))  ssp2_rcp45_ab_1 <- rpois_matrix(exp_ab_1(temp_ssp2_rcp45, prec_ssp2_rcp45)) ssp2_rcp45_ab_2 <- rpois_matrix(exp_ab_2(temp_ssp2_rcp45, prec_ssp2_rcp45))  ssp4_rcp60_ab_1 <- rpois_matrix(exp_ab_1(temp_ssp4_rcp60, prec_ssp4_rcp60)) ssp4_rcp60_ab_2 <- rpois_matrix(exp_ab_2(temp_ssp4_rcp60, prec_ssp4_rcp60))  ssp5_rcp85_ab_1 <- rpois_matrix(exp_ab_1(temp_ssp5_rcp85, prec_ssp5_rcp85)) ssp5_rcp85_ab_2 <- rpois_matrix(exp_ab_2(temp_ssp5_rcp85, prec_ssp5_rcp85))  # Simulate conservation costs costs <- rnorm(N^2, 100, 20) %>%   matrix(ncol = N, nrow = N) costs[matrix(runif(N^2),ncol = N, nrow = N) < 0.05] <- NA # Assume some locked-out constraints  costs_rast <- rast(costs) names(costs_rast) <- \"Cost\"  # Group abundances abundance_rast <- c(   rast(ssp1_rcp26_ab_1),   rast(ssp2_rcp45_ab_1),   rast(ssp4_rcp60_ab_1),   rast(ssp5_rcp85_ab_1),   rast(ssp1_rcp26_ab_2),   rast(ssp2_rcp45_ab_2),   rast(ssp4_rcp60_ab_2),   rast(ssp5_rcp85_ab_2) )  names(abundance_rast) <- c('ssp1_rcp26_ab_1',                        'ssp2_rcp45_ab_1',                        'ssp4_rcp60_ab_1',                        'ssp5_rcp85_ab_1',                        'ssp1_rcp26_ab_2',                        'ssp2_rcp45_ab_2',                        'ssp4_rcp60_ab_2',                        'ssp5_rcp85_ab_2')  plot(abundance_rast)"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/climate-sdm.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model specification","title":"Example using simulated data from a species distribution model","text":"start conservation problem analyst tasked finding minimum-set protected area network selecting planning units protecting two species ensure targets robust climate change. many types uncertainty analyst can face. Robust Prioritizr agnostic type uncertainty specified, although generally useful clear types uncertainty exists typical systematic conservation planning problem: Scenario Uncertainty: many plausible future scenarios features planning problem might affected Model Uncertainty: different models ecological systems conservation costs, different approaches modelling ecological systems costs Parameter Uncertainty: uncertainty specific values parameters used model Randomness errors model predictions first example, focus mostly scenario uncertainty, start build randomness model latter parts analysis. Consider analyst set predictions future species abundances two species four future RCP-SSP scenarios (SSP1-RCP2.6, SSP2-RCP4.5, SSP4-RCP6.0, SSP5-RCP8.5), specified conservation cost. diagram , plot abundance estimates across climate scenarios cost:  solution identified must satisfy following constraints: total summed abundance Species 1 within protected area network must 20 across planning units across climate scenarios total summed abundance Species 1 within protected area network must 20 across planning units across climate scenarios select units locked-constraints (Cost = NA) simplicity, specify additional constraints, connectivity constraints boundary penalties, planning problem.","code":"plot(c(abundance_rast, costs_rast))"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/climate-sdm.html","id":"solving-with-standard-prioritizr","dir":"Articles","previous_headings":"","what":"Solving with standard Prioritizr","title":"Example using simulated data from a species distribution model","text":"first pass, can solve problem traditional Prioritizr specification, using one climate scenarios (SSP2-RCP4.5) planning. specification solves following conservation planning problem: \\min \\sum_{=1}^{} x_i c_i \\text{subject } \\sum_{=1}^x_i r_{ij} \\geq T_j \\quad \\forall \\space j \\J x_i \\\\{0,1\\} \\quad \\forall \\space \\x binary decision variable whether protect cell , c conservation cost, r abundance species j cell (taken abundance SSP2-RCP4.5 moment) T representation target species j (taken 20 species moment).  challenge planning approach account climates. result, planning solution fail reach targets climate scenarios, particularly extreme climate scenario SSP5-RCP8.5.  planning solution identified robust alternative climate scenarios, abundance levels within identified protected area network falls target scenarios selected SSP2-RCP4.5. particular, represented almost none Species 1 extreme climate scenario.","code":"target <- 20 abundance_ssp2_rcp45 <- abundance_rast[[c('ssp2_rcp45_ab_1',                                          'ssp2_rcp45_ab_2')]]  p1 <- problem(costs_rast, abundance_ssp2_rcp45) %>%   add_min_set_objective() %>%   add_absolute_targets(target) %>%   add_binary_decisions() %>%   add_default_solver(verbose = F)  s1 <- solve(p1)  plot(s1) plot_solution_eval <- function(soln) {   representation_rs1 <- values(abundance_rast * soln) %>%     apply(2, sum, na.rm = T)   data.frame(value = representation_rs1) %>%     mutate(name = names(representation_rs1)) %>%     mutate(name = factor(name, names(representation_rs1), names(representation_rs1))) %>%     mutate(target_met = if_else(value >= target, 'Target met', 'Target not met')) %>%     ggplot(aes(x = value, y = name, fill = target_met)) +     geom_bar(stat = 'identity') +     geom_vline(xintercept = target) +     theme_bw() +     scale_fill_manual(values = c('#0072B2', '#D55E00')) +     labs(x = 'Abundance in PA', y = '', fill = '') +     theme(panel.grid = element_blank()) } plot_solution_eval(s1)"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/climate-sdm.html","id":"solving-with-robust-prioritizr","dir":"Articles","previous_headings":"","what":"Solving with Robust Prioritizr","title":"Example using simulated data from a species distribution model","text":"Robust Prioritizr gives users flexible interface solve conservation planning problems robust alternative climate scenarios sources uncertainty. Using modified minimum set objective, users can solve following problem: \\min \\sum_{=1}^{} x_i c_i   \\text{subject }   \\Pr_k \\{ \\sum_{=1}^x_i r_{ijk} \\geq T_j \\} \\geq \\alpha \\quad \\forall \\space j \\J   x_i \\\\{0,1\\} \\quad \\forall \\space \\now r indexed k, feature value specific realization (.e., climate scenario). problem ensures targets met just one specific realization species abundance, across many different realizations scenario k, probability targets met across realizations exceeds certain confidence level \\alpha. \\alpha=1 (default robust approach), solution must meet species abundance targets across realizations k species j. Specification alternative predictions abundance species achieved groups argument call Robust Prioritizr. enables user pass alternative specifications species abundance values one raster Prioritizr tell problem indeed represent species/ features across different realizations. can extract relevant groupings names raster object specified, depending specific formatting names. groupings supplied add_*_robust_constraints . , can solve problem using Robust Prioritizr, supplying full raster containing abundance predictions across climate scenarios groups argument. now, keep confidence level 1, ensuring targets met species across scenarios. can use robust minimum set objective invoking add_robust_min_set_objective.  robust solution identified lot planning units compared non-robust solution. likely lot planning units needed ensure species ranges covered across multiple plausible climate scenarios. can examine whether robust solution indeed meets targets across specified climate scenarios:  total abundance robust PA network now exceeds targets every climate scenario.","code":"# Recall that the abundance raster is ordered by scenario, then by species, # i.e. species_1_scenario_1, species_1_scenario_2 etc. scenario_matrix <- str_split_fixed(names(abundance_rast), pattern = '_', n = 4) groups <- paste0(\"species_\", scenario_matrix[,4]) # Extract the index in the fourth position groups #> [1] \"species_1\" \"species_1\" \"species_1\" \"species_1\" \"species_2\" \"species_2\" #> [7] \"species_2\" \"species_2\" rp1 <- problem(costs_rast, abundance_rast) %>%   add_constant_robust_constraints(groups = groups) %>%   add_absolute_targets(target) %>%   add_robust_min_set_objective() %>%   add_binary_decisions() %>%   add_default_solver(verbose = F)  rs1 <- solve(rp1)  s1_combined <- c(s1, rs1) names(s1_combined) <- c('Non-robust', 'Robust')  plot(s1_combined) plot_solution_eval(rs1)"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/climate-sdm.html","id":"why-not-just-use-the-worst-case-scenario","dir":"Articles","previous_headings":"","what":"Why not just use the worst-case scenario?","title":"Example using simulated data from a species distribution model","text":"reader justified questioning Robust Prioritizr exists alternative simple data transformations analyst can use alter problem make appear conservative. consider three possible approaches see generate different inferior solution compared Robust Prioritizr: Taking extreme climate scenario: intuition protected area network meets target extreme climate scenario, conservative enough meet targets climate scenarios Adding buffer target Taking minimum values planning unit species","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/climate-sdm.html","id":"taking-the-most-extreme-climate-scenario","dir":"Articles","previous_headings":"Why not just use the worst-case scenario?","what":"Taking the most extreme climate scenario","title":"Example using simulated data from a species distribution model","text":"Given particular narrow ranges Species 1, can see protected area network specifically focuses protecting climatic niches extreme climate scenario (SSP5-RCP8.5) still fail meet targets milder climate scenario. Protecting species narrow climate niches like Species 1 requires planning solution jointly considers , just one, climate scenario.","code":"abundance_ssp5_rcp85 <- abundance_rast[[c('ssp5_rcp85_ab_1',                                          'ssp5_rcp85_ab_2')]] p2a <- problem(costs_rast, abundance_ssp5_rcp85) %>%   add_min_set_objective() %>%   add_absolute_targets(target) %>%   add_binary_decisions() %>%   add_default_solver(verbose = F)  s2a <- solve(p2a)  plot_solution_eval(s2a)"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/climate-sdm.html","id":"adding-a-buffer-to-the-target","dir":"Articles","previous_headings":"Why not just use the worst-case scenario?","what":"Adding a buffer to the target","title":"Example using simulated data from a species distribution model","text":"Increasing targets might appear easy fix, account reality area abundant species one climate scenario area abundant species different climate scenario. Thus, increasing target going select planning units areas predicted abundant number species one climate scenario, failing represent species alternative climate scenario. simple demonstration, see even multiplying target 3 solve problem.","code":"p2b <- problem(costs_rast, abundance_ssp2_rcp45) %>%   add_min_set_objective() %>%   add_absolute_targets(target * 3) %>%   add_binary_decisions() %>%   add_default_solver(verbose = F)  s2b <- solve(p2b)  plot_solution_eval(s2b)"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/climate-sdm.html","id":"taking-the-minimum-value-across-scenarios","dir":"Articles","previous_headings":"Why not just use the worst-case scenario?","what":"Taking the minimum value across scenarios","title":"Example using simulated data from a species distribution model","text":"common misconception robust optimization hood (one past) solving problem robust approach equivalent solving problem supplying minimum value abundance across scenarios. approaches common -called “climate refugia” analyses, objective identify overlaps species ranges across multiple climate scenarios direct conservation efforts areas. example, can identify areas Species 2 (species broader climatic niches) present dataset taking minimum abundance estimates across climate scenarios:  case, see still overlap species ranges across climate scenarios. use minimum represent abundance species 2, can solve problem, still see solution identifies becomes conservative, abundance levels exceeding target substantial margin (leading higher costs).  cases, analysis may even yield feasible solutions. example, consider Species 1, ranges overlap across climate scenarios. Taking minimum abundance estimates scenarios lead minimum value zero abundance planning units. features used prioritization, problem infeasible. seen figure , minimum value abundance levels zero planning units.","code":"abundance_min_2 <- c(abundance_rast[[5]] > 0,                    abundance_rast[[8]] > 0,                    min(abundance_rast[[5:8]] > 0)) abundance_min_2 %>% plot() abundance_min <- abundance_ssp2_rcp45 abundance_min[[2]] <- min(abundance_rast[[5:8]]) # Only set that for species 2 p2c <- problem(costs_rast, abundance_min) %>%   add_min_set_objective() %>%   add_absolute_targets(target) %>%   add_binary_decisions() %>%   add_default_solver(verbose = F) s2c <- solve(p2c) plot_solution_eval(s2c) abundance_min_1 <- c(abundance_rast[[1]] > 0,                    abundance_rast[[4]] > 0,                    min(abundance_rast[[1:4]] > 0)) abundance_min_1 %>% plot(type = 'continuous', range = c(0,1))"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/climate-sdm.html","id":"tuning-the-level-of-robustness","dir":"Articles","previous_headings":"","what":"Tuning the level of robustness","title":"Example using simulated data from a species distribution model","text":"confidence level parameter conf_level gives users flexibility alter level robustness solution. parameter interpreted minimum proportion realizations (total number realizations) target satisfied. default, target needs met across realizations (conf_level=1). cases, relaxing conf_level parameter something less 1 can help solver find solution higher objective value, turns infeasible problem feasible one. realizations problem, meaningful user specify conf_level less 1. , say problem 4 realizations uncertainty (4 scenarios). conf_level parameter effect solution, lower 0.75, target can violated least 1 4 realizations. Anything higher 0.75 affect model. Now consider case user something like 100 realizations data, say drawn statistical distribution. parameter becomes much meaningful. Tuning confidence level parameter something like 0.95 means target met across 95% (95 100) realizations, ensuring constraint held large proportion realizations guaranteeing solution quality giving flexibility problem search better solutions. demonstrate confidence level parameter works, build additional uncertainty existing problem. Recall abundance estimates statistical model estimated uncertainty. Consider matrix coefficients beta_species_dist_* carries uncertainty parameters describing relationship temperature, precipitation expected abundance. can use distribution parameters draw species abundance across scenarios . consider small example total 40 realizations uncertainty problem, n_replicates replicates climate scenario. fit Robust Prioritizr, bring replicates 1 single multilayer raster. solve problem without altering confidence level. alter confidence level parameter, can expect target met across planning units. Fortunately, solution can found. can see target met across replicates provide problem.  number replicates increase, becomes increasingly hard problem find feasible solutions. also increases cost solution. relax confidence level bit, can allow target met realizations uncertainty. allows optimisation problem search lower cost solution. example, can specify conf_level=0.9, mandates solution meet objective least 90% random realizations supplied problem.  see proportion targets met least 90%. Species 2, much wider representation landscape, conservation target met much 90% replicates. Users can also evaluate relative trade-offs robustness costs solutions identified examining trade-curve across different confidence level specifications.  however note setting conf_level anything 1 increase solve times can make problem intractable large number planning units/ realizations.  Users carefully evaluate whether necessary adjust conf_level parameter understand consequences can solving larger problems.","code":"n_replicates <- 10  # Simulate abundance levels given future climates ssp1_rcp26_ab_1 <- replicate(n_replicates, ab_draw_pois(temp_ssp1_rcp26, prec_ssp1_rcp26, beta_species_dist_1)) ssp1_rcp26_ab_2 <- replicate(n_replicates, ab_draw_pois(temp_ssp1_rcp26, prec_ssp1_rcp26, beta_species_dist_2))  ssp2_rcp45_ab_1 <- replicate(n_replicates, ab_draw_pois(temp_ssp2_rcp45, prec_ssp2_rcp45, beta_species_dist_1)) ssp2_rcp45_ab_2 <- replicate(n_replicates, ab_draw_pois(temp_ssp2_rcp45, prec_ssp2_rcp45, beta_species_dist_2))  ssp4_rcp60_ab_1 <- replicate(n_replicates, ab_draw_pois(temp_ssp4_rcp60, prec_ssp4_rcp60, beta_species_dist_1)) ssp4_rcp60_ab_2 <- replicate(n_replicates, ab_draw_pois(temp_ssp4_rcp60, prec_ssp4_rcp60, beta_species_dist_2))  ssp5_rcp85_ab_1 <- replicate(n_replicates, ab_draw_pois(temp_ssp5_rcp85, prec_ssp5_rcp85, beta_species_dist_1)) ssp5_rcp85_ab_2 <- replicate(n_replicates, ab_draw_pois(temp_ssp5_rcp85, prec_ssp5_rcp85, beta_species_dist_2)) species_1_realizations <- c(rast(ssp1_rcp26_ab_1),                             rast(ssp2_rcp45_ab_1),                             rast(ssp4_rcp60_ab_1),                             rast(ssp5_rcp85_ab_1)) names(species_1_realizations) <- c(paste0(\"s1_ssp1_rcp26_r\", 1:n_replicates),                                    paste0(\"s1_ssp2_rcp45_r\", 1:n_replicates),                                    paste0(\"s1_ssp4_rcp60_r\", 1:n_replicates),                                    paste0(\"s1_ssp5_rcp85_r\", 1:n_replicates))  species_2_realizations <- c(rast(ssp1_rcp26_ab_2),                             rast(ssp2_rcp45_ab_2),                             rast(ssp4_rcp60_ab_2),                             rast(ssp5_rcp85_ab_2)) names(species_2_realizations) <- c(paste0(\"s2_ssp1_rcp26_r\", 1:n_replicates),                                    paste0(\"s2_ssp2_rcp45_r\", 1:n_replicates),                                    paste0(\"s2_ssp4_rcp60_r\", 1:n_replicates),                                    paste0(\"s2_ssp5_rcp85_r\", 1:n_replicates))  abundance_uncertainty <- c(species_1_realizations, species_2_realizations) groups_uncertainty <- c(rep(\"s1\", n_replicates*4),                         rep(\"s2\", n_replicates*4)) rp2a <- problem(costs_rast, abundance_uncertainty) %>%   add_constant_robust_constraints(groups = groups_uncertainty) %>%   add_absolute_targets(target) %>%   add_robust_min_set_objective() %>%   add_binary_decisions() %>%   add_default_solver(verbose = F)  rs2a <- solve(rp2a) eval_soln_uncertain <- function(soln, return_df = FALSE) {   dist <- values(soln * abundance_uncertainty) %>%     unname %>%     apply(2, sum, na.rm = T)   df <- data.frame(groups = groups_uncertainty, value = dist) %>%     mutate(target_met = if_else(value >= target, 'Target met', 'Target not met'))   if (return_df) return(df)   df %>%     ggplot(aes(x = value, fill = target_met)) +     geom_histogram() +     geom_vline(xintercept = target) +     facet_wrap(vars(groups), ncol = 1) +     scale_fill_manual(values = c('#0072B2', '#D55E00')) +     theme_bw() +     theme(panel.grid = element_blank()) } eval_soln_uncertain(rs2a) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # Note that \"method = 'chance'\" may not be scalable to larger problems rp2b <- problem(costs_rast, abundance_uncertainty) %>%   add_constant_robust_constraints(groups = groups_uncertainty, conf_level = .9) %>%   add_absolute_targets(target) %>%   add_robust_min_set_objective(method = 'chance') %>%   add_binary_decisions() %>%   add_default_solver(verbose = F)  rs2b <- solve(rp2b)  eval_soln_uncertain(rs2b) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. eval_soln_uncertain(rs2b, return_df = TRUE) %>%   group_by(groups) %>%   summarise(prop_target_met = mean(target_met == 'Target met') ) #> # A tibble: 2 × 2 #>   groups prop_target_met #>   <chr>            <dbl> #> 1 s1               0.9   #> 2 s2               0.975 conf_level_vect <- seq(0.5, 1, 0.1) solve_chance_cons <- function(c) {                  p <- problem(costs_rast, abundance_uncertainty) %>%                   add_constant_robust_constraints(groups = groups_uncertainty, conf_level = c) %>%                   add_absolute_targets(target) %>%                   add_robust_min_set_objective(method = 'chance') %>%                   add_binary_decisions() %>%                   add_default_solver(verbose = F)                  solve(p)                }  rp2c <- list() solve_times <- c() for (i in 1:length(conf_level_vect)) {   start.time <- Sys.time()   rp2c[[i]] <- solve_chance_cons(conf_level_vect[i])   end.time <- Sys.time()   solve_times <- c(solve_times, end.time - start.time) }   sp2c <- rast(rp2c) cost_conf_level <- values(sp2c * costs_rast) %>%   apply(2, sum, na.rm = T)  chance_cons_df <- data.frame(conf_level = conf_level_vect, cost = cost_conf_level, solve_times)  chance_cons_df %>%   ggplot(aes(x = conf_level, y = cost)) +   geom_point() +   geom_line() +   scale_x_reverse() +   theme_bw() +   labs(x = 'Confidence Level', y = 'Cost') +   theme(panel.grid = element_blank()) chance_cons_df %>%   ggplot(aes(x = conf_level, y = solve_times)) +   geom_point() +   geom_line() +   scale_x_reverse() +   theme_bw() +   labs(x = 'Confidence Level', y = 'Solve times', title = \"Solve times using Chance Constraints (Gurobi)\") +   theme(panel.grid = element_blank())"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/robust.prioritizr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with robust systematic conservation planning","text":"systematic conservation planning problems require users parameterize planning unit data costs based statistical models future projections bound contain uncertainty. example, conservation planning problems involve designing protected areas resilient across future climate change ensure targets met just one predicted scenario, also across plausible climate scenarios. Likewise, conservation planning problems involve use predictions species distribution models carry uncertainty , ignored, can mean targets conservation planning problem frequently violated.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/robust.prioritizr.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Getting started with robust systematic conservation planning","text":"illustrate extent issue, consider simplified conservation planning problem minimum set objective. contains 100 planning units equal costs, 2 features, absolute target 30. focus feature_1 example. Across planning units, feature_1 uncertain value takes normal distribution mean 1 standard deviation 0.2. Suppose researcher know underlying distribution, goes field obtains estimate feature_1 random draw distribution use planning problem. words, value feature_1 planning units overestimated (1), underestimated (1). feature_2 uncertainty takes value 1.5 across planning units. solve problem prioritizr.  prioritization process, planning units higher number feature_1 planning unit selected planning units less feature_1. shown , prioritizr selects planning units highest estimated number features.  give desirable results estimate number features planning units accurate carry uncertainty. However, number features planning units perfect estimates, can see constraint violated. synthetic case, know number features planning unit follow distribution, means variations see across features caused estimation error represent underlying variations planning units’ features. Planning units selected overestimated number features (number features greater 1). uncertainties features accounted , prioritization problem overwhelmingly select planning units predicted number features. cause solution -optimistic targets can achieve planning solution. good chance target constraints violated practice. see , generate 500 realizations feature_1 distribution evaluate good solution across realizations. can estimate likely solution violates target constraint.  green vertical line depicts expected feature_1 , orange bars shows distribution feature_1 actually . can see planning solution identified violated target feature_1 realizations draw statistical distribution. planning solution violate constraint large number realizations, even though solved using unbiased estimate feature_1? prioritization process, planning units overestimate feature_1 disproportionately selected, appears planning units features. operations researchers call “Curse Optimality”, prioritization process amplify errors present data, selectively choosing planning units overestimated features underestimated costs. robust approaches used, planning solution likely violate targets, leading solutions disappoint fall far behind want prioritization process.","code":"set.seed(500)  mu <- 1 sigma <- 0.2  N <- 5 target <- N*2  feature_1 <- matrix(rnorm(100, mean = mu, sd = sigma), nrow = N, ncol = N) ## Warning in matrix(rnorm(100, mean = mu, sd = sigma), nrow = N, ncol = N): data ## length differs from size of matrix: [100 != 5 x 5] feature_2 <- matrix(1.5, nrow = N, ncol = N) sim_features_not_robust_raster <- c(rast(feature_1),                                     rast(feature_2)) names(sim_features_not_robust_raster) <- c(\"feature_1\", \"feature_2\")  pu <- matrix(1, nrow = N, ncol = N) sim_pu_raster <- rast(pu) names(sim_pu_raster) <- c(\"Cost\")  p1 <- problem(sim_pu_raster, sim_features_not_robust_raster) %>%   add_min_set_objective() %>%   add_absolute_targets(target) %>%   add_binary_decisions() %>%   add_default_solver(verbose = FALSE)  s1 <- solve(p1) names(s1) <- c('solution')  plot(c(sim_features_not_robust_raster, sim_pu_raster, s1)) df <- data.frame(   feature_1 = values(sim_features_not_robust_raster[[1]]),   solution = values(s1)   )  df %>%   arrange(feature_1) %>%   mutate(selected = if_else(solution == 1, \"Yes\", \"No\")) %>%   mutate(rank = nrow(.)-row_number()+1) %>%   ggplot(aes(x = rank, y = feature_1, fill = selected)) +   geom_bar(stat = 'identity') +   labs(x = \"Rank of Feature 1\", y = \"Feature 1 value\", fill = \"Selected\") +   theme_bw() +   theme(panel.grid = element_blank()) # Number of simulations n_sims <- 500 sim_feature_1 <- replicate(n_sims, matrix(rnorm(N^2, mean = mu, sd = sigma), nrow = N, ncol = N)) %>%   rast feature_1_outcomes <- sim_feature_1 * s1 feature_1_targets <- values(feature_1_outcomes) %>%   apply(2, sum) %>%   unname  expected_target <- sum(df$feature_1 * df$solution)  data.frame(feature_1 = unname(feature_1_targets)) %>%   mutate(violated = if_else(feature_1 < target, \"Below target\", \"Above target\")) %>%   mutate(violated = factor(violated, c(\"Below target\", \"Above target\"))) %>%   ggplot(aes(x = feature_1, fill = violated)) +   geom_histogram(color = 'white', bins = 30) +   theme_bw() +   geom_vline(xintercept = target, linetype = 2) +   geom_vline(xintercept = expected_target, color = '#009e73') +   scale_fill_manual('', values = c('#d55e00', '#0072b2'), drop = FALSE) +   theme(panel.grid = element_blank())"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/robust.prioritizr.html","id":"robust-minimum-set-objective","dir":"Articles","previous_headings":"","what":"Robust minimum set objective","title":"Getting started with robust systematic conservation planning","text":"parameterize uncertainty features, need supply counts feature realizations simulated. core robust.prioritizr approach use groupings, tell algorithm  Using approach, can evaluate representation new solution s2 across realizations Feature 1.  representation Feature 1 dramatically improved evaluated across entire distribution Feature 1, realizations Feature 1 representation target value.","code":"## Note: here I exploited the fact that the min set objective does not actually use the feature groupings behind the scenes ## Note: add_relative_targets will be a bit tricky to interpret as the \"number of features\" in each realization is different... will need to override with the max of the group (i.e. relative to the maximum of number of features across all realisations), or the mean... need to be transparent  sim_features_robust_raster <- c(sim_feature_1, rast(feature_2), rast(feature_2)) names(sim_features_robust_raster) <- c(paste0(rep('f1_', nlyr(sim_feature_1)),1:nlyr(sim_feature_1)),                                        'f2_1', 'f2_2') feature_groupings <- c(rep('f1', nlyr(sim_feature_1)), 'f2', 'f2')  p2 <- problem(sim_pu_raster, sim_features_robust_raster) %>%   add_constant_robust_constraints(groups = feature_groupings,                                   conf_level = .9) %>%   add_absolute_targets(target) %>%   add_robust_min_set_objective(method = 'cvar') %>%   add_binary_decisions() %>%   add_default_solver(verbose = FALSE)  s2 <- solve(p2, force = TRUE) soln <- c(s1, s2) names(soln) <- c(\"Non-robust Solution\", \"Robust Solution\")  plot(soln) feature_1_targets_robust <- values(sim_feature_1 * s2) %>%   apply(2, sum) %>%   unname  data.frame(`not_robust` = unname(feature_1_targets),            `robust` = unname(feature_1_targets_robust)) %>%   tidyr::pivot_longer(c('not_robust', 'robust'), names_to = 'name', values_to = 'values') %>%   mutate(name = factor(name, c('not_robust', 'robust'), c('Non-Robust', 'Robust'))) %>%   mutate(violated = if_else(values < target, \"Below target\", \"Above target\")) %>%   mutate(violated = factor(violated, c(\"Below target\", \"Above target\"))) %>%   ggplot(aes(x = values, fill = violated)) +   geom_histogram(color = 'white', bins = 30) +   theme_bw() +   geom_vline(xintercept = target, linetype = 2) +   geom_vline(xintercept = expected_target, color = '#009e73') +   scale_fill_manual('', values = c('#d55e00', '#0072b2'), drop = FALSE) +   facet_wrap(vars(name), ncol = 1) +   theme(panel.grid = element_blank())"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/robust.prioritizr.html","id":"robust-minimum-shortfall-objective","dir":"Articles","previous_headings":"","what":"Robust minimum shortfall objective","title":"Getting started with robust systematic conservation planning","text":"Likewise, problem can solved minimum shortfall objective, objective minimize weighted average shortfall species representation target feature target. demonstrate first use standard (robust) use prioritizr, focusing minimizing shortfall feature_1 target.  Using approach , evaluate full distribution possible representations feature_1 across realizations simulated .  Observe prioritizr sees feature_1 achieved expected target, indicated green line, actual representation simulated distribution nowhere near expected level. implies shortfall metric used standard prioritizr -representation shortfall target. Now, let’s observe solution differ instead used robust approaches. robust approach, shortfall instead quantified minimum value distribution representation feature_1.  Importantly, relative improvement solution limited budget constraint imposed function.  robust approach able find solution much higher probability reaching species target accurately able use minimum, worst-case, realization data identify solution least amount shortfall. Though important recognize amount improvement yielded robust solution dependent constraints imposed . Consider alternative problems formulation, much smaller budget.  , budget constrained tightly 5 cells. Robustness typically achieved selecting planning units. Therefore, even though robust solution used, solution improve much.  can see distribution outcomes change much case. budget tightly constrained, means even robust approach able find solution within budget reduces total amount shortfall feature_1.","code":"budget <- target*2  p3 <- problem(sim_pu_raster, sim_features_not_robust_raster) %>%   add_absolute_targets(target) %>%   add_min_shortfall_objective(budget = budget) %>%   add_binary_decisions() %>%   add_default_solver(verbose = FALSE)  s3 <- solve(p3)  plot(s3) feature_1_outcomes <- sim_feature_1 * s3 feature_1_targets <- values(feature_1_outcomes) %>%   apply(2, sum) %>%   unname  representation_summary <- eval_feature_representation_summary(p3, s3)  expected_target <- representation_summary[   representation_summary$feature == 'feature_1',   'absolute_held' ] %>%   as.numeric  data.frame(feature_1 = unname(feature_1_targets)) %>%   mutate(violated = if_else(feature_1 < target, \"Below target\", \"Above target\")) %>%   mutate(violated = factor(violated, c(\"Below target\", \"Above target\"))) %>%   ggplot(aes(x = feature_1, fill = violated)) +   geom_histogram(color = 'white', bins = 30) +   theme_bw() +   geom_vline(xintercept = target, linetype = 2) +   geom_vline(xintercept = expected_target, color = '#009e73') +   scale_fill_manual('', values = c('#d55e00', '#0072b2'), drop = FALSE) +   theme(panel.grid = element_blank()) p4 <- problem(sim_pu_raster, sim_features_robust_raster) %>%   add_constant_robust_constraints(groups = feature_groupings, conf_level = 1) %>%   add_absolute_targets(target) %>%   add_robust_min_shortfall_objective(budget = budget) %>%   add_binary_decisions() %>%   add_default_solver(verbose = FALSE)  s4 <- solve(p4) plot(s4) feature_1_targets_robust <- values(sim_feature_1 * s4) %>%   apply(2, sum) %>%   unname  representation_summary <- eval_feature_representation_summary(p4, s4)  expected_robust_target <- representation_summary %>%   filter(substr(feature, 0, 2) == 'f1') %>%   summarise(absolute_held = min(absolute_held)) expected_robust_target <- as.numeric(expected_robust_target)  plot_df <- data.frame(`not_robust` = unname(feature_1_targets),            `robust` = unname(feature_1_targets_robust)) %>%   tidyr::pivot_longer(c('not_robust', 'robust'), names_to = 'name', values_to = 'values') %>%   mutate(name = factor(name, c('not_robust', 'robust'), c('Not Robust', 'Robust'))) %>%   mutate(violated = if_else(values < target, \"Violated\", \"Not violated\")) %>%   mutate(violated = factor(violated, c(\"Violated\", \"Not violated\")))  plot_df %>%   ggplot(aes(x = values, fill = violated)) +   geom_histogram(color = 'white', bins = 30) +   theme_bw() +   geom_vline(xintercept = target, linetype = 2) +   geom_vline(data = filter(plot_df, name == 'Not Robust'), aes(xintercept = expected_target),              color = '#009e73') +     geom_vline(data = filter(plot_df, name == 'Robust'), aes(xintercept = expected_robust_target),                color = '#0072b2') +   scale_fill_manual('', values = c('#d55e00', '#0072b2'), drop = FALSE) +   facet_wrap(vars(name), ncol = 1) +   theme(panel.grid = element_blank()) # Use a small budget small_budget <- 5  # Not robust version p5 <- problem(sim_pu_raster, sim_features_not_robust_raster) %>%   add_absolute_targets(target) %>%   add_min_shortfall_objective(budget = small_budget) %>%   add_binary_decisions() %>%   add_default_solver(verbose = FALSE)  s5 <- solve(p5)  representation_summary <- eval_feature_representation_summary(p5, s5)  expected_target <- representation_summary[   representation_summary$feature == 'feature_1',   'absolute_held' ] %>%   as.numeric  p6 <- problem(sim_pu_raster, sim_features_robust_raster) %>%   add_constant_robust_constraints(groups = feature_groupings) %>%   add_absolute_targets(target) %>%   add_robust_min_shortfall_objective(budget = small_budget) %>%   add_binary_decisions() %>%   add_default_solver(verbose = FALSE)  s6 <- solve(p6)  fig_rast <- c(s5,s6) names(fig_rast) <- c('Non-Robust Solution', 'Robust Solution')  plot(fig_rast) representation_summary <- eval_feature_representation_summary(p6, s6)  expected_robust_target <- representation_summary %>%   filter(substr(feature, 0, 2) == 'f1') %>%   summarise(absolute_held = min(absolute_held)) expected_robust_target <- as.numeric(expected_robust_target)  feature_1_targets <- values(sim_feature_1 * s5) %>%   apply(2, sum) %>%   unname  feature_1_targets_robust <- values(sim_feature_1 * s6) %>%   apply(2, sum) %>%   unname  plot_df <- data.frame(`not_robust` = unname(feature_1_targets),            `robust` = unname(feature_1_targets_robust)) %>%   tidyr::pivot_longer(c('not_robust', 'robust'), names_to = 'name', values_to = 'values') %>%   mutate(name = factor(name, c('not_robust', 'robust'), c('Not Robust', 'Robust'))) %>%   mutate(violated = if_else(values < target, \"Violated\", \"Not violated\")) %>%   mutate(violated = factor(violated, c(\"Violated\", \"Not violated\")))  plot_df %>%   ggplot(aes(x = values, fill = violated)) +   geom_histogram(color = 'white', bins = 30) +   theme_bw() +   geom_vline(xintercept = target, linetype = 2) +   geom_vline(data = filter(plot_df, name == 'Not Robust'), aes(xintercept = expected_target),              color = '#009e73') +     geom_vline(data = filter(plot_df, name == 'Robust'), aes(xintercept = expected_robust_target),                color = '#0072b2') +   scale_fill_manual('', values = c('#d55e00', '#0072b2'), drop = FALSE) +   facet_wrap(vars(name), ncol = 1) +   theme(panel.grid = element_blank())"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/robust.prioritizr.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Getting started with robust systematic conservation planning","text":"robust.prioritizr extends upon list popular objective functions prioritizr incorporate robust constraints, must used conjunction prioritizr functions. get started formulating spatial conservation planning problem, user recommended follow guides prioritizr documentation first, prototyping first version planning problem without robust constraints first, gradually updating problem specification robust constraints package.","code":""},{"path":[]},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/vic-cons-planning.html","id":"dataset","dir":"Articles","previous_headings":"","what":"Dataset","title":"Example using Victoria, Australia","text":"First, load dataset bundled package. achieve , use following functions. data package contains following datasets: Species occurrence (species): Projections 18 threatened species across four CMIP6 climate scenarios (e.g., SSP1-RCP2.6, SSP5-RCP8.5) five time periods (1990-2090). Derived Archibald et al. (2024). Species details (species_details): table linking raster layer names corresponding species, climate scenarios, timesteps. Conservation cost (cost): proxy conservation cost based 2013 Human Footprint Index Williams et al. (2020). Protected areas (pa): location current protected areas. Study area (study_area): boundary state Victoria. first generate plot current protected areas state, act locked-constraints must selected part planning solution.  can visualize projected occurrence brush-tailed rock-wallaby (Petrogale penicillata), critically endangered species Victoria. figure shows wallaby’s suitable habitat projected shrink considerably high-emissions climate scenario.  figure illustrates, projected distribution species can change dramatically depending time period climate scenario. robust.prioritizr designed handle challenge integrating different scenarios, ensuring final conservation plan meets targets regardless future unfolds.","code":"species <- get_vic_species() cost <- get_vic_cost() pa <- get_vic_pa() species_details <- get_vic_species_metadata() study_area <- get_vic_study_area() pa_categorical <- pa levels(pa_categorical) <- data.frame(id = 0:1, cover = c(\"Not PA\", \"Current PA\")) pa_plt <- ggplot() +   geom_spatraster(data = pa_categorical, na.rm = T) +   geom_sf(data = study_area, fill = NA) +   scale_fill_manual('',                     values = c(\"#F0E442\", \"#009E73\"),                     na.value = \"transparent\", na.translate = FALSE) +   theme_void() +   theme(legend.position = 'bottom') pa_plt wallaby <- species_details %>%   filter(species == 'Petrogale_penicillata' & timestep %in% c(1990, 2030, 2090)) wallaby_ids <- pull(wallaby, id) wallaby_maps <- species[[wallaby_ids]] names(wallaby_maps) <- paste0(pull(wallaby, scenario), \": \", pull(wallaby, timestep))  plot(wallaby_maps, axes = F, maxcell = 1e4, , fun= \\() lines(study_area))"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/vic-cons-planning.html","id":"feature-groupings","dir":"Articles","previous_headings":"","what":"Feature Groupings","title":"Example using Victoria, Australia","text":"key concept robust.prioritizr groups argument. standard prioritizr problem, feature single data layer. However, robust.prioritizr uses multiple layers represent single feature, layer corresponds different realization data (e.g., climate projection time-step), analyst uncertain . purposes analysis, consider climate projection-timestep pair “realization” data. data realizations jointly determine range uncertainty analyst input data. groups argument character vector tells solver layers belong feature. allows problem apply single, shared target scenarios feature. example, group layer simply species name. group contains indices data realizations particular species. example, see group (species) contains 17 data realizations, comprising climate scenarios time-steps available analysis.","code":"groups <- species_details$species table(groups) #> groups #>       Anthochaera_phrygia           Burramys_parvus Gymnobelideus_leadbeateri  #>                        17                        17                        17  #>    Lichenostomus_melanops         Liopholis_guthega          Litoria_spenceri  #>                        17                        17                        17  #>  Miniopterus_schreibersii          Mixophyes_balbus     Neophema_chrysogaster  #>                        17                        17                        17  #>      Pedionomus_torquatus     Petrogale_penicillata           Philoria_frosti  #>                        17                        17                        17  #>          Pseudomys_fumeus   Pseudophryne_corroboree   Pseudophryne_pengilleyi  #>                        17                        17                        17  #>      Sarcophilus_harrisii         Stipiturus_mallee    Tympanocryptis_lineata  #>                        17                        17                        17"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/vic-cons-planning.html","id":"setting-a-feasible-target","dir":"Articles","previous_headings":"","what":"Setting a Feasible Target","title":"Example using Victoria, Australia","text":"using robust minimum set objective, crucial set target achievable across scenarios. target species higher total predicted occurrence even one scenario, problem infeasible. robust.prioritizr enforces features target within group, ensuring target met across data realizations. means targets consistent within group, override targets specified user. package following internal behavior absolute, relative manual targets: Absolute targets: ensures target absolute terms met across climates time-steps Relative targets: first, calculates “best-case” feature values group, finding realization group highest summed feature value. , calculates relative target absolute terms multiplying user-supplied target (e.g., 20%) add_relative_targets “best-case” feature value. ensures feature representation solution meets relative target even “good” realization feature abundant study area Manual targets: manual targets must specified realization feature. different targets specified features group, robust.prioritizr take maximum target. means manual targets consistent within group, otherwise yield unexpected behavior (particularly “sense” altered “\\<=”). figure useful relative targets use, can calculate worst-case best-case feature representations species using global function terra, summarizes best worst-case values using dplyr. can also find maximum relative target can use problem ensure problem still feasible. shows interested fully robust solution, maximum relative target achievable problem 0.0022, worst-case scenario, Snowy Mountains skink (Liopholis guthega) represented 1 5km grid cell, 452 grid cells best-case scenario. means even planning units selected conservation, worst-case high-emissions climate scenario Snowy Mountains skink represented small area. piece code also lay groundwork alternative relative targets can use computing 20th percentile maximum species representation achievable. let solution fall target 20% outcomes, maximum relative target achievable Snown Mountains skink near 0.073. solving initial problem, progress explore increase relative targets use relaxing robustness problem, representation species data can increased. visualise planning solutions, also define helper function follows.","code":"global_sum_species <- global(species, fun = 'sum', na.rm = TRUE) %>%   as.data.frame() %>%   rownames_to_column(\"name\") worst_case_occurrence <- species_details %>%   select(-any_of(\"sum\")) %>%   left_join(global_sum_species, by = \"name\") %>%   group_by(species) %>%   summarise(worst_case = min(sum),             pct_20 = max(sum[sum < quantile(sum, 0.2)]),             cvar = mean(sum[sum < quantile(sum, 0.1)]),             best_case = max(sum),             max_relative_target = round(worst_case/ best_case, 4),             pct20_relative_target = round(pct_20/ best_case, 4),             worst_case_scenario = proj[which.min(sum)]) %>%   arrange(max_relative_target) worst_case_occurrence %>%   head() #> # A tibble: 6 × 8 #>   species                 worst_case pct_20  cvar best_case max_relative_target #>   <chr>                        <dbl>  <dbl> <dbl>     <dbl>               <dbl> #> 1 Liopholis_guthega                1     33   5.5       452              0.0022 #> 2 Burramys_parvus                 17     89  28.5       816              0.0208 #> 3 Philoria_frosti                 20     75  29         759              0.0264 #> 4 Sarcophilus_harrisii           241    826 321        6395              0.0377 #> 5 Pseudophryne_corroboree         39     94  56.5       584              0.0668 #> 6 Litoria_spenceri               612   1338 766.       2738              0.224  #> # ℹ 2 more variables: pct20_relative_target <dbl>, worst_case_scenario <chr> # Function to plot a planning solution plot_planning_soln <- function(soln) {   soln[soln==1] <- 2   soln[pa==1] <- 1   levels(soln) <- data.frame(     id = c(0,1,2),     cover = c(\"Not Current PA\", \"Current PA\", \"New PA\")   )    plt <- ggplot() +     geom_spatraster(data = soln, na.rm = T) +     geom_sf(data = study_area, fill = NA, show.legend = TRUE) +     scale_fill_manual('',                       values = c(\"#F0E442\", \"#009E73\", \"#D55E00\"),                       na.value = \"transparent\", na.translate = FALSE,                       drop = FALSE) +     theme_void() +     theme(legend.position = 'bottom')   return(plt) }"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/vic-cons-planning.html","id":"solving-the-robust-problem","dir":"Articles","previous_headings":"","what":"Solving the Robust Problem","title":"Example using Victoria, Australia","text":"workflow robust problem similar prioritizr, addition robust-specific functions. breakdown problem construction: problem(): Defines planning units (cost) features (species scenarios). add_absolute_targets(): Sets conservation target (least 1 cell). add_constant_robust_constraints(): Specifies groups link scenarios features. add_robust_min_set_objective(): robust version minimum set objective. add_locked_in_constraints(): Locks existing protected areas. add_default_solver(): Selects solver use.  problem solves expected. can now verify target met species across scenarios time-steps.  plot shows target met cases. However, since target low, clearly room protect habitat many species. motivates exploring solutions higher targets, potentially relaxing robustness constraints.","code":"rt <- 0.0022 rpv1 <- problem(cost, species) %>%   add_relative_targets(rt) %>%   add_constant_robust_constraints(groups = groups) %>%   add_robust_min_set_objective() %>%   add_locked_in_constraints(pa) %>%   add_default_solver(verbose = F)  rsv1 <- solve(rpv1)  plot_planning_soln(rsv1) +   ggtitle(\"Robust Solution (Target = 1%)\") feature_rep_r <- global(species * rsv1, fun = 'sum', na.rm = T) %>%   as.data.frame() %>%   rownames_to_column('name') worst_case_occurrence$rt <- rt*worst_case_occurrence$best_case species_details %>%   select(-any_of(contains('sum'))) %>%   arrange(species, scenario, timestep) %>%   left_join(feature_rep_r, by = \"name\") %>%   mutate(species_scenario = paste(species, scenario)) %>%   ggplot(aes(x = timestep, y = sum, color = scenario, group = species_scenario)) +   facet_wrap(vars(species), scales = \"free_y\") +   geom_line() +   theme_bw() +   geom_hline(data = worst_case_occurrence, aes(yintercept = rt)) +   labs(x = \"Time-step\", y = \"Representation (number of cells)\") +   coord_cartesian(xlim = c(2030, 2090)) +   theme(panel.grid = element_blank(),         legend.position = 'bottom')"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/vic-cons-planning.html","id":"relaxing-robustness-to-increase-the-target","dir":"Articles","previous_headings":"","what":"Relaxing robustness to increase the target","title":"Example using Victoria, Australia","text":"previous example shows, enforcing targets held robustly across scenarios timesteps can unrealistic. limits maximum feasible target can adopt planning solution. also means lots room improve representation species. robustness target relaxed – say instead hold across realizations, needs hold certain probability – lot room increase target. Users can control robustness solution conf_level parameter add_*_robust_constraints, specifies proportion constraints must met group solution considered feasible. case, specifying 80% means 17 historic future climate projections, solution needs meet target least 13 (17 \\times 0.8) climate projections/ time-steps. words, target can breached 3 climate projections/ time-steps. relaxing target, can pursue much ambitious relative targets (0.07 protection), ensuring solution feasible reasonably robust climate projections time-steps.   can also verify indeed relative targets breached 20% climate projections/ time-steps. planning solution limits proportion target breached 18%, even challenging species conserve, Snowy Mountains skink (Liopholis guthega).","code":"rt2 <- 0.07  rpv2 <- problem(cost, species) %>%   add_relative_targets(rt2) %>%   robust.prioritizr::add_constant_robust_constraints(groups = groups,                                                      conf_level = 0.8) %>%   add_locked_in_constraints(pa) %>%   add_binary_decisions() %>%   robust.prioritizr::add_robust_min_set_objective(method = \"chance\") %>%   add_default_solver(verbose = F)  rsv2 <- solve(rpv2)  rs <- (plot_planning_soln(rsv1) +   ggtitle(\"Robust (1% target)\") +     guides(color = 'none', fill = 'none')) +   plot_planning_soln(rsv2) +   ggtitle(\"Partially Robust (7% target)\") +   plot_layout(guides = 'collect') &   theme(legend.position = 'bottom') rs feature_rep_r2 <- eval_feature_representation_summary(rpv2, rsv2) worst_case_occurrence$rt2 <- rt2*worst_case_occurrence$best_case rsv2_representation <- species_details %>%   rename(feature = name) %>%   arrange(species, scenario, timestep) %>%   left_join(feature_rep_r2, by = \"feature\") %>%   mutate(species_scenario = paste(species, scenario)) rsv2_representation %>%   ggplot(aes(x = timestep, y = absolute_held, color = scenario, group = species_scenario)) +   facet_wrap(vars(species), scales = \"free_y\") +   geom_hline(data = worst_case_occurrence, aes(yintercept = rt2), linetype = 2) +   geom_line() +   theme_bw() +   labs(x = \"Time-step\", y = \"Representation (number of cells)\") +   coord_cartesian(xlim = c(2030, 2090), ylim = c(0, NA)) +   theme(panel.grid = element_blank(),         legend.position = 'bottom') rsv2_representation %>%   left_join(worst_case_occurrence, by = 'species') %>%   group_by(species) %>%   summarise(     violation_pct = round(mean(absolute_held < rt2), 3)   ) %>%   arrange(-violation_pct) %>%   head() #> # A tibble: 6 × 2 #>   species                 violation_pct #>   <chr>                           <dbl> #> 1 Burramys_parvus                 0.176 #> 2 Liopholis_guthega               0.176 #> 3 Neophema_chrysogaster           0.176 #> 4 Philoria_frosti                 0.176 #> 5 Sarcophilus_harrisii            0.176 #> 6 Pseudophryne_corroboree         0.059"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/vic-cons-planning.html","id":"varying-the-confidence-level","dir":"Articles","previous_headings":"","what":"Varying the confidence level","title":"Example using Victoria, Australia","text":"lower confidence level species aid feasibility problem, optimization problem also takes advantage lowered confidence level help reduce costs. may desirable species broader ranges solution can found even targets met robustly across climate scenarios time-steps. Ideally, want relax confidence levels species helps solve problem otherwise infeasible, rather relaxing confidence levels species. example, can use add_variable_robust_constraints flexibly specify species want lowered confidence levels apply, ensuring species meets targets robustly across scenarios.","code":"var_rob_cons <- tibble::tibble(   features = split(names(species), groups)[unique(groups)],   conf_level = 1 )  relax_cons_species <- c(   \"Liopholis_guthega\",   \"Burramys_parvus\",   \"Philoria_frosti\",   \"Pseudophryne_corroboree\",   \"Sarcophilus_harrisii\" )  var_rob_cons$conf_level <- if_else(unique(groups) %in% relax_cons_species, 0.8, 1)  rpv3 <- problem(cost, species) %>%   add_relative_targets(rt2) %>%   add_variable_robust_constraints(var_rob_cons) %>%   add_locked_in_constraints(pa) %>%   add_binary_decisions() %>%   robust.prioritizr::add_robust_min_set_objective(method = \"chance\") %>%   add_default_solver(verbose = F)  rsv3 <- solve(rpv3)  comb_plt <- (plot_planning_soln(rsv1) +   ggtitle(\"Robust (1% target)\") +   guides(fill = 'none', color = 'none')) +   plot_planning_soln(rsv2) +   ggtitle(\"Partially Robust (7% target)\") +   plot_planning_soln(rsv3) +   ggtitle(\"Fully Robust* (7% target)\") +   plot_layout(guides = 'collect') &   theme(legend.position = 'bottom') comb_plt +   labs(caption = \"* Robust up to 80% probability for some species\")"},{"path":"https://frankiecho.github.io/robust.prioritizr/articles/vic-cons-planning.html","id":"comparison-with-a-non-robust-solution","dir":"Articles","previous_headings":"","what":"Comparison with a Non-Robust Solution","title":"Example using Victoria, Australia","text":"comparison, solve standard prioritizr problem using historical baseline data higher target. apply 7% target problem, solve using historical baseline data.  non-robust solution may appear effective evaluated historical baseline, may potentially miss targets future climate projections. can check representation Orange-bellied parrot (Neophema chrysogaster) compare partially robust solution. partially robust solution limits total number climate projections/ time-steps Orange-bellied parrot representation falls desired target.","code":"is_historic_baseline <- species_details %>%   filter(scenario == 'historic_baseline') %>%   pull(id)  species_hb <- species[[is_historic_baseline]]  pv1 <- problem(cost, species_hb) %>%   add_relative_targets(0.07) %>%   add_min_set_objective() %>%   add_locked_in_constraints(pa) %>%   add_default_solver(verbose = F)  sv1 <- solve(pv1)  comb_plt <- (plot_planning_soln(sv1) +   ggtitle(\"Non-Robust (7% target)\") +   guides(fill = 'none', color = 'none')) +   plot_planning_soln(rsv2) +   ggtitle(\"Partially Robust (7% target)\") +   plot_layout(guides = 'collect') &   theme(legend.position = 'bottom') comb_plt spotlight_species <- 'Neophema_chrysogaster'  selected_species <- species_details %>%   filter(species == spotlight_species) %>%   arrange(scenario, timestep) feature_rep_nr <- eval_feature_representation_summary(rpv2, sv1) %>%   filter(feature %in% selected_species$name) %>%   rownames_to_column(\"name\") %>%   rename(non_robust = absolute_held ) feature_rep_r <- eval_feature_representation_summary(rpv2, rsv2) %>%   filter(feature %in% selected_species$name) %>%   rownames_to_column(\"name\") %>%   rename(robust = absolute_held ) feature_rep_fr <- eval_feature_representation_summary(rpv2, rsv3) %>%   filter(feature %in% selected_species$name) %>%   rownames_to_column(\"name\") %>%   rename(fully_robust = absolute_held )  species_details %>%   rename(feature = name) %>%   right_join(feature_rep_nr, by = 'feature') %>%   right_join(feature_rep_r, by = 'feature') %>%   right_join(feature_rep_fr, by = 'feature') %>%   pivot_longer(c('non_robust', 'robust', \"fully_robust\"), names_to = 'solution') %>%   mutate(solution = factor(solution, c('non_robust', 'robust', 'fully_robust'),                            c(\"Non-robust\", \"Partially Robust\", \"Fully Robust*\"))) %>%   left_join(worst_case_occurrence, by = 'species') %>%   mutate(species_scenario = paste(species, scenario)) %>%   filter(timestep > 1990) %>%   ggplot(aes(x = timestep, y = value, color = scenario, group = species_scenario)) +   facet_wrap(vars(solution)) +   geom_hline(data = worst_case_occurrence %>% filter(species == spotlight_species), aes(yintercept = rt2), linetype = 2) +   geom_point() +   geom_line() +   theme_bw() +   labs(x = \"Time-step\", y = \"Representation (number of cells)\") +   coord_cartesian(xlim = c(2030, 2090)) +   theme(panel.grid = element_blank(),         legend.position = 'bottom')+   labs(caption = \"* Robust up to 80% probability for some species\")"},{"path":"https://frankiecho.github.io/robust.prioritizr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Frankie Cho. Author, maintainer, copyright holder. Jeffrey O Hanson. Author.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cho F, Hanson JO (2025). robust.prioritizr: Robust Systematic Conservation Prioritization. R package version 0.1.0.0, https://github.com/frankiecho/robust.prioritizr.","code":"@Manual{,   title = {robust.prioritizr: Robust Systematic Conservation Prioritization},   author = {Frankie Cho and Jeffrey O Hanson},   year = {2025},   note = {R package version 0.1.0.0},   url = {https://github.com/frankiecho/robust.prioritizr}, }"},{"path":[]},{"path":"https://frankiecho.github.io/robust.prioritizr/index.html","id":"robust-systematic-conservation-prioritization-in-r","dir":"","previous_headings":"","what":"Robust Systematic Conservation Prioritization in R","title":"Robust Systematic Conservation Prioritization","text":"robust.prioritizr R package provides robust optimization techniques systematic conservation prioritization. important conservation prioritizations typically consider likely outcome associated conservation action (e.g., establishing protected area safeguard threatened species population) fail consider outcomes consequences meeting conservation objectives. extending prioritizr R package, package can used generate conservation prioritizations account uncertainty climate change scenario projections, species distribution models, ecosystem service models, measurement errors. particular, prioritizations can generated fully robust uncertainty minimizing (maximizing) objectives worst possible outcome. Since reducing associated achieving conservation objectives may sacrifice objectives (e.g., minimizing protected area implementation costs), prioritizations can also generated partially robust based specified confidence level parameter. Partially robust prioritizations can generated based chance constrained programming problem (Charnes & Cooper 1959, doi:10.1287/mnsc.6.1.73) conditional value--risk problem (Rockafellar & Uryasev 2000, doi:10.21314/JOR.2000.038). information, please see video .","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Robust Systematic Conservation Prioritization","text":"can install official version package CRAN following R code. Alternatively, can install development version online code repository following R code.","code":"install.packages(\"robust.prioritizr\") if (!require(remotes)) install.packages(\"remotes\") remotes::install_github(\"frankiecho/robust.prioritizr\")"},{"path":"https://frankiecho.github.io/robust.prioritizr/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Robust Systematic Conservation Prioritization","text":"short example showing build robust conservation prioritization robust.prioritizr package. conservation prioritization involves set candidate places management (termed planning units) set biodiversity elements (termed features), species, ecosystems, ecosystem services. guide priority setting, conservation prioritizations typically consider likely outcome associated implementing conservation management given planning unit. example, considering protected area establishment management option, conservation prioritizations typically assume establishing protected area planning unit 100% chance successfully protecting features thought inhabit planning unit. However, assumption may lead misplaced priorities uncertainty whether features inhabit different planning units. package uses multiple alternative outcomes explicitly account uncertainty. achieve , users () input alternative outcomes feature separate feature prioritization process, (ii) specify input features represent alternative outcomes grouping together. example, 5 alternative outcomes particular species based different climate scenarios, data 5 scenarios input separate features assigned feature group. , provide example showing simulated data.","code":"# Load packages library(robust.prioritizr) library(prioritizr) library(terra) # Get planning unit data pu <- get_sim_pu_raster()  # Get feature data features <- get_sim_features()  # Preview data print(pu) ## class       : SpatRaster  ## size        : 10, 10, 1  (nrow, ncol, nlyr) ## resolution  : 0.1, 0.1  (x, y) ## extent      : 0, 1, 0, 1  (xmin, xmax, ymin, ymax) ## coord. ref. : Undefined Cartesian SRS  ## source      : sim_pu_raster.tif  ## name        :    layer  ## min value   : 190.1328  ## max value   : 215.8638 print(features) ## class       : SpatRaster  ## size        : 10, 10, 5  (nrow, ncol, nlyr) ## resolution  : 0.1, 0.1  (x, y) ## extent      : 0, 1, 0, 1  (xmin, xmax, ymin, ymax) ## coord. ref. : Undefined Cartesian SRS  ## source      : sim_features.tif  ## names       : feature_1, feature_2, feature_3, feature_4, feature_5  ## min values  : 0.6782107, 0.2243090, 0.4147364, 0.2199663, 0.4343547  ## max values  : 0.9339561, 0.4142271, 0.8390267, 0.5976492, 0.6667633 # Define the feature groups. # Here, we have data for 5 layers. Let's pretend that the first two layers # correspond to different climate projections (i.e., alternative outcomes) for # the same species (hereafter, species A) and the remaining layers correspond # to another species (hereafter, species B). As such, we will # assign the first two layers to the group A, and the remaining layers # to the group B groups <- c(rep(\"A\", 2), rep(\"B\", nlyr(features) - 2))  # Preview groups print(groups) ## [1] \"A\" \"A\" \"B\" \"B\" \"B\" # Build problem based on the robust minimum set objective, # targets to secure 10% of each species, and a confidence level of # 90% to obtain a solution that can meet the targets in a manner # that is highly robust to uncertainty p <-   problem(pu, features) |>   add_robust_min_set_objective() |>   add_constant_robust_constraints(groups = groups, conf_level = 0.9) |>   add_binary_decisions() |>   add_relative_targets(0.1) |>   add_default_solver(verbose = FALSE)  # Solve the problem soln <- solve(p)  # Preview solution print(soln) ## class       : SpatRaster  ## size        : 10, 10, 1  (nrow, ncol, nlyr) ## resolution  : 0.1, 0.1  (x, y) ## extent      : 0, 1, 0, 1  (xmin, xmax, ymin, ymax) ## coord. ref. : Undefined Cartesian SRS  ## source(s)   : memory ## varname     : sim_pu_raster  ## name        : layer  ## min value   :     0  ## max value   :     1 # Plot the solution plot(soln, main = \"Robust prioritization\", axes = FALSE)"},{"path":"https://frankiecho.github.io/robust.prioritizr/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Robust Systematic Conservation Prioritization","text":"questions robust.prioritizr R package suggestions improving , please post issue code repository.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_constant_robust_constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Add constant robust constraints — add_constant_robust_constraints","title":"Add constant robust constraints — add_constant_robust_constraints","text":"Add robust constraints conservation problem specify solution ideally aim level robustness feature group.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_constant_robust_constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add constant robust constraints — add_constant_robust_constraints","text":"","code":"add_constant_robust_constraints(x, groups, conf_level = 1)"},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_constant_robust_constraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add constant robust constraints — add_constant_robust_constraints","text":"x prioritizr::problem() object. groups character vector indicating features grouped together purposes characterizing uncertainty. particular, groups used specify group name feature features group name grouped together. example, features correspond alternative predictions species different scenarios, features group name. conf_level numeric value describing level robustness required solution (ranging 0 1). Defaults 1, corresponding maximally robust solution. See Details section information parameter.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_constant_robust_constraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add constant robust constraints — add_constant_robust_constraints","text":"updated prioritizr::problem() object constraint added .","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_constant_robust_constraints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add constant robust constraints — add_constant_robust_constraints","text":"robust constraints used generate solutions robust uncertainty. particular, conf_level controls important solution robust uncertainty. help explain constraints operate, consider minimum set formulation reserve selection problem (per prioritizr::add_min_set_objective(). conf_level = 1, solution must maximally robust uncertainty means solution must meet targets features associated feature group. Although solution highly robust uncertainty, may especially useful might especially high costs (words, setting high conf_level may result solution poor objective value). lowering conf_level, means solution must meet certain percentage targets associated feature group. example, conf_level = 0.95, solution must meet, least, 95% targets features associated feature group. Alternatively, conf_level = 0.5, solution must meet, least, half targets features associated feature group. Finally, conf_level = 0, solution need meet targets features associated feature group. , recommended use conf_level = 0.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_constant_robust_constraints.html","id":"data-requirements","dir":"Reference","previous_headings":"","what":"Data requirements","title":"Add constant robust constraints — add_constant_robust_constraints","text":"robust constraints require multiple alternative realizations biodiversity element interest (e.g., species, ecosystems, ecosystem services). example, might 5 species interest. applying different spatial modeling techniques, might 10 different models 5 different species can use models generate 10 alternative realizations 5 species (yielding 50 alternative realizations total). use data, input 50 alternative realizations 50 features initializing conservation planning problem (.e., prioritizr::problem()) use function specify features correspond species (based feature groupings parameter).","code":""},{"path":[]},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_constant_robust_constraints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add constant robust constraints — add_constant_robust_constraints","text":"","code":"# \\dontrun{ # Load packages library(prioritizr) library(terra) #> terra 1.8.70  # Get planning unit data pu <- get_sim_pu_raster()  # Get feature data features <- get_sim_features()  # Define the feature groups, # Here, we will assign the first 2 features to the group A, and # the remaining features to the group B groups <- c(rep(\"A\", 2), rep(\"B\", nlyr(features) - 2))  # Build problem p <-   problem(pu, features) |>   add_robust_min_set_objective() |>   add_constant_robust_constraints(groups = groups, conf_level = 0.9) |>   add_relative_targets(0.1) |>   add_binary_decisions() |>   add_default_solver(verbose = FALSE)  # Solve the problem soln <- solve(p)  # Plot the solution plot(soln)  # }"},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_set_objective.html","id":null,"dir":"Reference","previous_headings":"","what":"Add robust minimum set objective — add_robust_min_set_objective","title":"Add robust minimum set objective — add_robust_min_set_objective","text":"Add objective conservation planning problem minimizes cost solution ensuring targets feature group met manner robust uncertainty.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_set_objective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add robust minimum set objective — add_robust_min_set_objective","text":"","code":"add_robust_min_set_objective(x, method = \"chance\")"},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_set_objective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add robust minimum set objective — add_robust_min_set_objective","text":"x prioritizr::problem() object. method character value name probabilistic constraint formulation method. Available options include (\"chance\") chance constraint programming method (Charnes Cooper 1959) (\"cvar\") conditional value--risk method (Rockafellar Uryasev 2000), Defaults \"chance\". See Details section information methods.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_set_objective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add robust minimum set objective — add_robust_min_set_objective","text":"updated prioritizr::problem() object objective added .","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_set_objective.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add robust minimum set objective — add_robust_min_set_objective","text":"robust minimum set objective seeks find set planning units minimum cost targets robust manner feature group. Since probabilistic calculations underpin objective non-linear, two methods provided formulating optimization problem mixed integer linear programming problem. methods chance constraint programming method (method = \"chance\") conditional value--risk method (method = \"cvar\"). particular, chance constraint programming method associated intuitive interpretation confidence level parameter (.e., specified per conf_level add_constant_robust_constraints() add_variable_robust_constraints()). Whereas, conditional value--risk constraint method may yield faster solve times. conditional value--risk constraint method capable preserving convexity optimization problem, uses continuous (instead binary) auxiliary variables. , chance constraint programming method may useful facilitating stakeholder involvement, conditional value--risk constraint method may useful large-scale planning exercises.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_set_objective.html","id":"mathematical-formulation","dir":"Reference","previous_headings":"","what":"Mathematical formulation","title":"Add robust minimum set objective — add_robust_min_set_objective","text":"objective can expressed mathematically set planning units (\\(\\) indexed \\(\\)), set feature groups (\\(J\\) indexed \\(j\\)), set features associated feature group (\\(K\\) indexed \\(k\\)). Let \\(c_i\\) denote cost planning unit \\(\\), \\(r_{ijk}\\) amount feature \\(k\\) associated planning unit \\(\\) feature group \\(j\\), \\(T_j\\) target feature group \\(j\\), \\(\\alpha\\) confidence level uncertainty (specified per conf_level add_constant_robust_constraints() add_variable_robust_constraints()). Additionally, describe decision variables, let \\(x_i\\) denote status planning unit \\(\\) (e.g., specifying whether planning unit \\(\\) selected binary values). Given terminology, robust minimum set formulation reserve selection problem formulated follows. $$ \\mathit{Minimize} \\space \\sum_{= 1}^{} x_i c_i \\\\ \\mathit{subject \\space } \\\\ \\Pr_k \\{ \\sum_{= 1}^{} x_i r_{ijk} \\geq T_j \\} \\geq \\alpha \\quad \\forall \\space j \\J $$ , objective function (first equation) minimize total cost solution. probabilistic constraints (second equation) specify solution must achieve particular probability threshold (based \\(\\alpha\\)) meeting targets features associated feature group. example, \\(\\alpha=1\\), every target associated feature group must met. Alternatively, \\(\\alpha=0.5\\), solution must 50% chance meeting targets associated feature group. Since probabilistic constraints non-linear, approximation methods used linearize optimization problem can solved mixed integer programming exact algorithm solvers. chance constraint programming method uses \"big-M\" formulation linearize probabilistic constraints (Charnes Cooper 1959). describe method, let \\(m_{jk}\\) denote binary auxiliary variable feature \\(k\\) associated feature group \\(j\\). Also, let \\(K_j\\) denote pre-computed value describing number features associated feature group \\(j\\). Given terminology, method involves replacing probabilistic constraints following linear constraints. $$ \\sum_{= 1}^{} x_i r_{ijk} + T_j m_{jk} \\geq T_{j} \\quad   \\forall \\space j \\J, \\space k \\K \\\\ \\sum_{k = 1}^{K_j} \\frac{m_{jk}}{K_j} \\leq 1 - \\alpha \\quad   \\forall \\space j \\J \\\\ m_{jk} \\\\{0, 1\\} \\quad   \\forall \\space j \\J, \\space k \\K $$ , solution allowed fail meet targets features, auxiliary variable \\(m_{jk}\\) used calculate proportion features targets met feature group. given feature group, proportion features target met constrained less \\(1 - \\alpha\\). method allows intuitive interpretation confidence level parameter. Yet method also adds \\(J \\times K\\) binary variables problem , , may present long solve times. conditional value--risk constraint method presents tighter formulation chance constraint programming method (Rockafellar Uryasev 2000). , method able better approximate non-linear probabilistic constraints , turn, tends yield solutions robust uncertainty chance constraint programming method. describe method, let \\(\\eta_j\\) denote continuous auxiliary variable feature group \\(j\\), \\(s_{jk}\\) continuous auxiliary variable feature \\(k\\) associated feature group \\(j\\). Given terminology, method involves replacing probabilistic constraints following linear constraints. $$ \\sum_{= 1}^{} x_i r_{ijk} - \\eta_j + s_{jk} \\geq 0 \\quad   \\forall \\space j \\J, \\space k \\K \\\\ \\eta_j - \\frac{1}{(1 - \\alpha) \\times K_j} \\sum_{k=1}^{K_j} s_{jk} \\geq T_j   \\quad \\forall \\space j \\J \\\\ s_{jk} \\geq 0 \\quad \\forall \\space j \\J, \\space k \\K \\\\ \\eta_j \\\\mathbb{R}  \\quad  \\forall \\space j \\J $$ , continuous auxiliary variables used represent \"tail\" distribution uncertain quantity (.e., \\(\\sum_{=1}^{} x_i r_{ijk}\\)). words, ensures average amount feature held solution particular feature group falls particular quantile (.e., \\((1 - \\alpha)\\)) greater target feature group (.e., \\(T_j\\)). Although method provide easily intuitive interpretation confidence level parameter, adds \\(J \\times K + J\\) continuous variables problem.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_set_objective.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add robust minimum set objective — add_robust_min_set_objective","text":"Charnes & Cooper WW (1959) Chance-constrained programming. Management Science, 6(1), 73–79. Rockafellar RT & Uryasev S (2000) Optimization conditional value--risk. Journal Risk, 2(3), 21–42.","code":""},{"path":[]},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_set_objective.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add robust minimum set objective — add_robust_min_set_objective","text":"","code":"# \\dontrun{ # Load packages library(prioritizr) library(terra) #> terra 1.8.70  # Get planning unit data pu <- get_sim_pu_raster()  # Get feature data features <- get_sim_features()  # Define the feature groups, # Here, we will assign the first 2 features to the group A, and # the remaining features to the group B groups <- c(rep(\"A\", 2), rep(\"B\", nlyr(features) - 2))  # Build problem with chance constraint programming method p <-   problem(pu, features) |>   add_robust_min_set_objective(method = \"cvar\") |>   add_constant_robust_constraints(groups = groups, conf_level = 0.9) |>   add_binary_decisions() |>   add_relative_targets(0.1) |>   add_default_solver(verbose = FALSE)  # Solve the problem soln <- solve(p)  # Plot the solution plot(soln)  # }"},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_shortfall_objective.html","id":null,"dir":"Reference","previous_headings":"","what":"Add robust minimum shortfall objective — add_robust_min_shortfall_objective","title":"Add robust minimum shortfall objective — add_robust_min_shortfall_objective","text":"Add objective conservation planning problem minimizes representation shortfalls feature group manner robust uncertainty, whilst ensuring total cost solution exceed budget.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_shortfall_objective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add robust minimum shortfall objective — add_robust_min_shortfall_objective","text":"","code":"add_robust_min_shortfall_objective(x, budget)"},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_shortfall_objective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add robust minimum shortfall objective — add_robust_min_shortfall_objective","text":"x prioritizr::problem() object. budget numeric value specifying maximum expenditure prioritization. problems multiple zones, argument budget can () single numeric value specify single budget entire solution (ii) numeric vector specify separate budget management zone.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_shortfall_objective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add robust minimum shortfall objective — add_robust_min_shortfall_objective","text":"updated prioritizr::problem() object objective added .","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_shortfall_objective.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add robust minimum shortfall objective — add_robust_min_shortfall_objective","text":"robust minimum shortfall objective seeks find set planning units minimizes representation shortfall feature group, subject budget. particular, target shortfall reflects difference target feature amount held candidate solution, expressed proportion target. target shortfalls calculated features associated feature group, representation shortfall used describe well features associated particular feature group represented candidate solution. Thus objective aims get close possible reducing representation shortfalls shortfalls zero, getting close possible reaching targets features associated feature groups. Since probabilistic calculations underpin objective non-linear, chance constraint programming method (Charnes Cooper 1959) used formulate optimization problem mixed integer linear programming problem. method, confidence level parameter (.e., specified per conf_level add_constant_robust_constraints() add_variable_robust_constraints()) describes quantile target shortfalls associated feature group minimized optimization. example, conf_level = 1 feature group, 100th quantile used means – calculating target shortfalls feature associated feature group – largest target shortfall associated features used calculate representation shortfall feature group. Additionally, conf_level = 0.5 feature group, 50th quantile used means median target shortfall features associated group used represent representation shortfall feature group.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_shortfall_objective.html","id":"mathematical-formulation","dir":"Reference","previous_headings":"","what":"Mathematical formulation","title":"Add robust minimum shortfall objective — add_robust_min_shortfall_objective","text":"objective can expressed mathematically set planning units (\\(\\) indexed \\(\\)), set feature groups (\\(J\\) indexed \\(j\\)), set features associated feature group (\\(K\\) indexed \\(k\\)). Let \\(c_i\\) denote cost planning unit \\(\\), \\(r_{ijk}\\) amount feature \\(k\\) associated planning unit \\(\\) feature group \\(j\\), \\(T_j\\) target feature group \\(j\\), \\(w_j\\) weight feature group \\(j\\), \\(\\alpha\\) confidence level uncertainty (specified per conf_level add_constant_robust_constraints() add_variable_robust_constraints()). Additionally, describe decision variables, let \\(x_i\\) denote status planning unit \\(\\) (e.g., specifying whether planning unit \\(\\) selected binary values), \\(v_{jk}\\) target shortfall feature \\(k\\) associated feature group \\(j\\), \\(y_j\\) representation shortfall feature group \\(j\\). Given terminology, robust minimum shortfall formulation reserve selection problem formulated follows. $$ \\mathit{Minimize} \\space \\sum_{j = 1}^{J} w_j \\times y_j \\\\ \\mathit{subject \\space } \\\\ \\sum_{= 1}^{} x_i c_i \\leq B \\\\ \\Pr_ k\\{\\sum_{= 1}^{} ( x_i \\times r_{ijk} ) +   ( T_{j} \\times v_{jk} ) \\geq T_j \\} \\geq \\alpha   \\quad \\forall j \\J \\\\ y_j \\geq v_{jk} \\quad \\forall j \\J, k \\K \\\\ 0 \\leq y_j \\leq 1 \\quad \\forall j \\J $$ , objective function (first equation) minimize weighted sum representation shortfalls feature group. budget constraints (second equation) ensure solution exceed budget. probabilistic constraints (third equation) specify target shortfall variables (.e., \\(v_{jk}\\)) associated feature group used calculate representation shortfall feature group, subset target shortfall variables used based confidence level (.e., \\(\\alpha\\)). example, \\(\\alpha=1\\), target shortfall variables associated feature group must used calculations. Alternatively, \\(\\alpha=0.5\\), enough target shortfall variables required calculations achieve 50% chance correctly calculating target shortfall variables given feature group. representation shortfall constraints (fourth equation) ensure representation shortfall variable feature group must greater equal target shortfall variables features associated feature group. combination constraints, means representation shortfall variable given feature group calculated largest value subset target shortfall variables features associated feature group, particular subset based confidence level. Thus \\(\\alpha\\) closer value 1, representation shortfall variable feature group calculated greater degree certainty , turn, optimization process seeks solution robust uncertainty. Since probabilistic constraints non-linear, approximation method used linearize optimization problem can solved mixed integer programming exact algorithm solvers. chance constraint programming method used linearize probabilistic constraints (Charnes Cooper 1959). describe method, let \\(m_{jk}\\) denote binary auxiliary variable feature \\(k\\) associated feature group \\(j\\). Also \\(K_j\\) denote pre-computed value describing number features associated feature group \\(j\\). Given terminology, method involves replacing probabilistic constraints following linear constraints. $$ \\sum_{= 1}^{} x_i r_{ijk} + T_j y_j + T_j m_{jk} \\geq T_{j} \\quad   \\forall \\space j \\J, \\space k \\K \\\\ \\sum_{k = 1}^{K_j} \\frac{m_{jk}}{K_j} \\leq 1 - \\alpha \\quad   \\forall \\space j \\J\\\\ m_{jk} \\\\{0, 1\\} $$ , solution calculates representation shortfall variable given feature group based particular subset target shortfalls associated features. Specifically, subset based particular number smallest target shortfall variables based \\(\\alpha\\). example, feature group associated 30 features \\(\\alpha=0.3\\), representation shortfall feature group calculated identifying 10 30 features smallest target shortfall variables, calculating maximum value 10 target shortfall variables. , chance constraint programming method provides intuitive approximation probabilistic constraints.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_shortfall_objective.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add robust minimum shortfall objective — add_robust_min_shortfall_objective","text":"Charnes & Cooper WW (1959) Chance-constrained programming. Management Science, 6(1), 73–79.","code":""},{"path":[]},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_robust_min_shortfall_objective.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add robust minimum shortfall objective — add_robust_min_shortfall_objective","text":"","code":"# \\dontrun{ # Load packages library(prioritizr) library(terra) #> terra 1.8.70  # Get planning unit data pu <- get_sim_pu_raster()  # Get feature data features <- get_sim_features()  # Define the feature groups, # Here, we will assign the first 2 features to the group A, and # the remaining features to the group B groups <- c(rep(\"A\", 2), rep(\"B\", nlyr(features) - 2))  # Build problem with budget calculated as 30% total cost p <-   problem(pu, features) %>%   add_robust_min_shortfall_objective(     budget = terra::global(pu, \"sum\", na.rm = TRUE)[[1]] * 0.3   ) %>%   add_constant_robust_constraints(groups = groups, conf_level = 0.4) %>%   add_binary_decisions() %>%   add_relative_targets(0.3) %>%   add_default_solver(verbose = FALSE)  # Solve the problem soln <- solve(p)  # Plot the solution plot(soln)  # }"},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_variable_robust_constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Add variable robust constraints — add_variable_robust_constraints","title":"Add variable robust constraints — add_variable_robust_constraints","text":"Add robust constraints conservation problem specify solution ideally aim different levels robustness feature group. example, function may especially useful important ensure prioritization highly robust uncertainty spatial distribution threatened species, moderately robust uncertainty spatial distribution widespread species.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_variable_robust_constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add variable robust constraints — add_variable_robust_constraints","text":"","code":"add_variable_robust_constraints(x, data)"},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_variable_robust_constraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add variable robust constraints — add_variable_robust_constraints","text":"x prioritizr::problem() object. data tibble::tibble() data frame containing information feature groups confidence level associated group. Defaults 1, corresponding maximally robust solution.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_variable_robust_constraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add variable robust constraints — add_variable_robust_constraints","text":"updated prioritizr::problem() object constraint added .","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_variable_robust_constraints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add variable robust constraints — add_variable_robust_constraints","text":"robust constraints used generate solutions robust uncertainty. particular, conf_level controls important solution robust uncertainty. help explain constraints operate, consider minimum set formulation reserve selection problem (per prioritizr::add_min_set_objective(). conf_level = 1, solution must maximally robust uncertainty means solution must meet targets features associated feature group. Although solution highly robust uncertainty, may especially useful might especially high costs (words, setting high conf_level may result solution poor objective value). lowering conf_level, means solution must meet certain percentage targets associated feature group. example, conf_level = 0.95, solution must meet, least, 95% targets features associated feature group. Alternatively, conf_level = 0.5, solution must meet, least, half targets features associated feature group. Finally, conf_level = 0, solution need meet targets features associated feature group. , recommended use conf_level = 0.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_variable_robust_constraints.html","id":"data-format","dir":"Reference","previous_headings":"","what":"Data format","title":"Add variable robust constraints — add_variable_robust_constraints","text":"data argument must tibble::tibble() data frame information feature groups confidence levels. , row corresponds different feature group columns contain information groups. particular, data must following columns. features list column names features belong group. particular, particular set features belong group, stored element column. conf_level numeric column values describe confidence level associated feature group (ranging 0 1). See Details section information conf_level values.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_variable_robust_constraints.html","id":"data-requirements","dir":"Reference","previous_headings":"","what":"Data requirements","title":"Add variable robust constraints — add_variable_robust_constraints","text":"robust constraints require multiple alternative realizations biodiversity element interest (e.g., species, ecosystems, ecosystem services). example, might 5 species interest. applying different spatial modeling techniques, might 10 different models 5 different species can use models generate 10 alternative realizations 5 species (yielding 50 alternative realizations total). use data, input 50 alternative realizations 50 features initializing conservation planning problem (.e., prioritizr::problem()) use function specify features correspond species (based feature groupings parameter).","code":""},{"path":[]},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/add_variable_robust_constraints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add variable robust constraints — add_variable_robust_constraints","text":"","code":"# \\dontrun{ # Load packages library(prioritizr) library(terra) library(tibble)  # Get planning unit data pu <- get_sim_pu_raster()  # Get feature data features <- get_sim_features()  # Define the feature group data # Here, we will assign the first 2 features to the group A, and the # remaining features to the group B groups <- c(rep(\"A\", 2), rep(\"B\", nlyr(features) - 2))  # Next, we will use this information to create a data frame containing # the feature groups and specifying a confidence level of 0.95 for group A, # and a confidence level of 0.5 for group B constraint_data <- tibble(   features = split(names(features), groups),   conf_level = c(0.95, 0.5) )  # Display constraint data print(constraint_data) #> # A tibble: 2 × 2 #>   features     conf_level #>   <named list>      <dbl> #> 1 <chr [2]>          0.95 #> 2 <chr [3]>          0.5   # Build problem p <-   problem(pu, features) |>   add_robust_min_set_objective() |>   add_variable_robust_constraints(data = constraint_data) |>   add_relative_targets(0.1) |>   add_binary_decisions() |>   add_default_solver(verbose = FALSE)  # Solve the problem soln <- solve(p)  # Plot the solution plot(soln)  # }"},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/data.html","id":null,"dir":"Reference","previous_headings":"","what":"Conservation planning dataset for Victoria, Australia — data","title":"Conservation planning dataset for Victoria, Australia — data","text":"conservation planning dataset Victoria, Australia can used generate robust prioritizations. dataset derived Archibald et al. (2024), Department Climate Change, Energy, Environment Water (2024), Global Administrative Areas (2024), Williams et al. (2009). example using dataset, please refer Example using Victoria, Australia vignette (vignette(\"vic-cons-planning\", package = \"robust.prioritizr\")).","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conservation planning dataset for Victoria, Australia — data","text":"","code":"get_vic_study_area()  get_vic_cost()  get_vic_pa()  get_vic_species()  get_vic_species_metadata()"},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Conservation planning dataset for Victoria, Australia — data","text":"get_vic_study_area() sf::st_sf() object. get_vic_cost() terra::rast() object get_vic_species() terra::rast() object get_vic_pa() terra::rast() object vic_species_metadata() tibble::tibble() object","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conservation planning dataset for Victoria, Australia — data","text":"Briefly, dataset contains 1.2988 × 104 planning units 18 terrestrial vertebrate species species, dataset contains present-day spatial distribution species well projections species' future spatial distribution 4 time periods based 4 combinations climate models scenarios. account existing conservation efforts, dataset also contains locations existing protected areas. following functions provided import dataset: get_vic_study_area() sf::st_sf() object containing spatial boundary Victoria, Australia (derived Global Administrative Areas 2024). get_vic_cost() terra::rast() object containing opportunity costs associated protected area establishment (derived Williams et al. 2020). object contains single layer, grid cells denote planning units. Cells contain positive continuous values, greater values denote greater opportunity costs. get_vic_pa() terra::rast() object containing locations existing protected areas (derived DCCEEW 2024). object contains single layer, grid cells denote planning units. Cells contain binary values indicating existing protected areas cover, least, 50% grid cell . get_vic_species() terra::rast() object containing present-day potential future spatial distributions terrestrial vertebrate species (derived Archibald et al. 2024). object contains 306 layers, layer corresponds predicted spatial distribution particular species particular point time based particular climate scenario. given layer, grid cells denote planning units. Cells contain binary values indicating species predicted present absent within cell. vic_species_metadata() tibble::tibble() data frame containing information species' spatial distribution data (.e., get_vic_species()). , row dadta.frame corresponds layer species' spatial distribution data, columns describe different aspects layers. object contains columns following values. id integer index values layers. E.g., fifth layer associated id value 5. id character names layers. values correspond names(get_vic_species()). species character scientific names species associated layers. class character taxonomic classes species associated layers. proj character names climate projections timesteps associated layers. Layers represent species' present-day distributions denoted value \"historic_baseline_1990\". Also, layers represent species' potential future distributions denoted values \"GCM-Ensembles_ssp126_2030\", \"GCM- Ensembles_ssp126_2050\", \"GCM-Ensembles_ssp126_2070\", \"GCM- Ensembles_ssp126_2090\", \"GCM-Ensembles_ssp245_2030\", \"GCM- Ensembles_ssp245_2050\", \"GCM-Ensembles_ssp245_2070\", \"GCM-Ensembles_ssp245_2090\", \"GCM-Ensembles_ssp370_2030\", \"GCM-Ensembles_ssp370_2050\", \"GCM-Ensembles_ssp370_2070\", \"GCM-Ensembles_ssp370_2090\", \"GCM-Ensembles_ssp585_2030\", \"GCM-Ensembles_ssp585_2050\", \"GCM-Ensembles_ssp585_2070\", \"GCM-Ensembles_ssp585_2090\". Note values provide information timestep scenario columns, provided help subsetting data. timestep numeric year datasets used generate layers. Layers represent species' present-day distributions denoted year 1990, layers represent species' potential future distributions denoted years 2030, 2050, 2070, 2090. scenario character names climate scenarios used generate layers. Layers represent species' present day distributions denoted \"historic_baseline\". Also, layers represent species' future distributions associated particular Shared Socioeconomic Pathway (SSP) Representative Concentration Pathways (RCP), (\"ssp126\") SSP 1 RCP 2.6, (\"ssp245\") SSP 2 RCP 4.5, (\"ssp370\") SSP 3 RCP 7.0, (\"ssp585\") SSP 5 RCP 8.5. sum numeric number planning units species predicted present within layers.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conservation planning dataset for Victoria, Australia — data","text":"Archibald CL, Summers DM, Graham EM, Bryan B (2024) Habitat suitability maps Australian flora fauna CMIP6 climate scenarios. GigaScience, 13:giae002. DCCEEW (2024), Collaborative Australian Protected Areas Database (CAPAD). Global Administrative Areas (2024). Database Global Administrative Areas. Version 4.1. Available https://gadm.org (accessed 15 August 2025). Williams BA, Venter O, Allan JR, Atkinson SC, Rehbein JA, Ward M, Di Marco M, Grantham HS, Ervin J, Goetz SJ, Hansen AJ, Jantz P, Pillay R, Rodríguez-Buriticá S, Supples C, Virnig ALS, Watson JEM (2020) Change terrestrial human footprint drives continued loss intact ecosystems. One Earth, 3:371–382.","code":""},{"path":[]},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conservation planning dataset for Victoria, Australia — data","text":"","code":"# load spatial R packages library(sf) #> Linking to GEOS 3.12.2, GDAL 3.9.3, PROJ 9.4.1; sf_use_s2() is TRUE library(terra) #> terra 1.8.70  # load data vic_study_area <- get_vic_study_area() vic_cost <- get_vic_cost() vic_species <- get_vic_species() vic_pa <- get_vic_pa()  vic_species_metadata <- get_vic_species_metadata()  # preview data print(vic_species_metadata) #> # A tibble: 306 × 8 #>       id name                        species class proj  timestep scenario   sum #>    <int> <chr>                       <chr>   <chr> <chr>    <int> <chr>    <int> #>  1     1 amphibians-Litoria_spencer… Litori… amph… GCM-…     2030 ssp126    2150 #>  2     2 amphibians-Litoria_spencer… Litori… amph… GCM-…     2050 ssp126    1879 #>  3     3 amphibians-Litoria_spencer… Litori… amph… GCM-…     2070 ssp126    1852 #>  4     4 amphibians-Litoria_spencer… Litori… amph… GCM-…     2090 ssp126    1902 #>  5     5 amphibians-Litoria_spencer… Litori… amph… GCM-…     2030 ssp245    2156 #>  6     6 amphibians-Litoria_spencer… Litori… amph… GCM-…     2050 ssp245    1807 #>  7     7 amphibians-Litoria_spencer… Litori… amph… GCM-…     2070 ssp245    1613 #>  8     8 amphibians-Litoria_spencer… Litori… amph… GCM-…     2090 ssp245    1532 #>  9     9 amphibians-Litoria_spencer… Litori… amph… GCM-…     2030 ssp370    2133 #> 10    10 amphibians-Litoria_spencer… Litori… amph… GCM-…     2050 ssp370    1735 #> # ℹ 296 more rows print(vic_study_area) #> Simple feature collection with 1 feature and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 787549.8 ymin: -4355353 xmax: 1595105 ymax: -3735800 #> Projected CRS: GDA94 / Australian Albers #> # A tibble: 1 × 2 #>   study_area                                                            geometry #>        <int>                                                  <MULTIPOLYGON [m]> #> 1          1 (((877278.1 -4231443, 881550.9 -4231443, 881550.9 -4239988, 877278… print(vic_cost) #> class       : SpatRaster  #> size        : 145, 189, 1  (nrow, ncol, nlyr) #> resolution  : 4272.776, 4272.776  (x, y) #> extent      : 787549.8, 1595105, -4355353, -3735800  (xmin, xmax, ymin, ymax) #> coord. ref. : GDA94 / Australian Albers (EPSG:3577)  #> source      : vic_cost.tif  #> name        : hfp2013_merisINT  #> min value   :          1.00000  #> max value   :         46.99466  print(vic_species) #> class       : SpatRaster  #> size        : 145, 189, 306  (nrow, ncol, nlyr) #> resolution  : 4272.776, 4272.776  (x, y) #> extent      : 787549.8, 1595105, -4355353, -3735800  (xmin, xmax, ymin, ymax) #> coord. ref. : GDA94 / Australian Albers (EPSG:3577)  #> source      : vic_species.tif  #> names       : amphi~_2030, amphi~_2050, amphi~_2070, amphi~_2090, amphi~_2030, amphi~_2050, ...  #> min values  :           0,           0,           0,           0,           0,           0, ...  #> max values  :           1,           1,           1,           1,           1,           1, ...  print(vic_pa) #> class       : SpatRaster  #> size        : 145, 189, 1  (nrow, ncol, nlyr) #> resolution  : 4272.776, 4272.776  (x, y) #> extent      : 787549.8, 1595105, -4355353, -3735800  (xmin, xmax, ymin, ymax) #> coord. ref. : GDA94 / Australian Albers (EPSG:3577)  #> source      : vic_pa.tif  #> name        : layer  #> min value   :     0  #> max value   :     1   # visualize data plot(vic_study_area, main = \"vic_study_area\")  plot(vic_cost, main = \"vic_cost\")  plot(vic_species, main = \"vic_species\")  plot(vic_pa, main = \"vic_pa\")"},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/robust.prioritizr.html","id":null,"dir":"Reference","previous_headings":"","what":"robust.prioritizr: Robust Systematic Conservation Prioritization in R — robust.prioritizr","title":"robust.prioritizr: Robust Systematic Conservation Prioritization in R — robust.prioritizr","text":"robust.prioritizr R package provides tools building solving robust systematic conservation prioritization problems. extends prioritizr package account uncertainty input data. particularly useful working data subject change, species distribution models climate change scenarios.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/robust.prioritizr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"robust.prioritizr: Robust Systematic Conservation Prioritization in R — robust.prioritizr","text":"package contains several vignettes designed showcase functionality. view , please use code vignette(\"name\", package = \"robust.prioritizr\") \"name\" name desired vignette (e.g., \"robust.prioritizr\"). robust.prioritizr Brief introduction package. climate-sdm Example using simulated data species distribution model. vic-cons-planning Example using Victoria, Australia.","code":""},{"path":[]},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/robust.prioritizr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"robust.prioritizr: Robust Systematic Conservation Prioritization in R — robust.prioritizr","text":"Authors: Frankie Cho frankie.cho@qut.edu.au (ORCID) Jeffrey O Hanson jeffrey.hanson@uqconnect.edu.au (ORCID)","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/robust_constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Add robust constraints — robust_constraints","title":"Add robust constraints — robust_constraints","text":"Add constraints conservation planning problem explicitly account uncertainty.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/robust_constraints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add robust constraints — robust_constraints","text":"robust constraints functions designed used robust objective function (e.g., add_robust_min_set_objective(), add_robust_min_shortfall_objective()). particular, functions used specify features grouped together characterizing plausible realizations. example, considering considering multiple projections species' distribution, constraints used specify features correspond species. addition specifying feature groups, constraints also used specify confidence level describes level robustness required solutions. following robust constraint functions can added conservation planning problem: add_constant_robust_constraints() Add robust constraints conservation problem specify solution ideally aim level robustness feature group. add_variable_robust_constraints() Add robust constraints conservation problem specify solution ideally aim different levels robustness feature group.","code":""},{"path":[]},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/robust_constraints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add robust constraints — robust_constraints","text":"","code":"# \\dontrun{ # Load packages library(prioritizr) library(terra) library(tibble)  # Get planning unit data pu <- get_sim_pu_raster()  # Get feature data features <- get_sim_features()  # Define the feature group data # Here, we will assign the first 2 features to the group A, and the # remaining features to the group B groups <- c(rep(\"A\", 2), rep(\"B\", nlyr(features) - 2))  # Build problem with constant robust constraints p1 <-   problem(pu, features) |>   add_constant_robust_constraints(groups = groups, conf_level = 0.5) |>   add_robust_min_set_objective() |>   add_relative_targets(0.1) |>   add_binary_decisions() |>   add_default_solver(verbose = FALSE)  # Next, we will create the input data for adding variable robust # constraints. In particular, we specify a confidence level of 0.95 for # group A, and a confidence level of 0.5 for group B constraint_data <- tibble(   features = split(names(features), groups),   conf_level = c(0.95, 0.5) )  # Display constraint data print(constraint_data) #> # A tibble: 2 × 2 #>   features     conf_level #>   <named list>      <dbl> #> 1 <chr [2]>          0.95 #> 2 <chr [3]>          0.5   # Build problem with variable robust constraints p2 <-   problem(pu, features) |>   add_variable_robust_constraints(data = constraint_data) |>   add_robust_min_set_objective() |>   add_relative_targets(0.1) |>   add_binary_decisions() |>   add_default_solver(verbose = FALSE)  # Solve the problems soln <- c(solve(p1), solve(p2)) names(soln) <- c(   \"constant robust constraints\", \"variable robust constraints\" )  # Plot the solutions plot(soln)  # }"},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/robust_objectives.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a robust objective function — robust_objectives","title":"Add a robust objective function — robust_objectives","text":"Add objective function conservation planning problem accounts uncertainty.","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/robust_objectives.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a robust objective function — robust_objectives","text":"Robust objective functions used find solutions likely meet conservation targets across range different scenarios realizations input data. particularly useful working data uncertain, species distribution models climate change scenarios. Note robust constraints must also used using objective functions (e.g., add_constant_robust_constraints(), add_variable_robust_constraints()). following robust objective functions can added conservation planning problem: add_robust_min_set_objective() Add objective conservation planning problem minimize cost solution ensuring targets feature group met manner robust uncertainty. function provides statistically robust alternative prioritizr::add_min_set_objective(). add_robust_min_shortfall_objective() Add objective conservation planning problem minimizes target shortfalls feature group manner robust uncertainty, whilst ensuring total cost solution exceed budget. function provides statistically robust alternative prioritizr::add_min_shortfall_objective().","code":""},{"path":[]},{"path":"https://frankiecho.github.io/robust.prioritizr/reference/robust_objectives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a robust objective function — robust_objectives","text":"","code":"# \\dontrun{ # Load packages library(prioritizr) library(terra) #> terra 1.8.70  # Get planning unit data pu <- get_sim_pu_raster() features <- get_sim_features()  # Define the feature groups, # Here, we will assign the first 2 features to the group A, and # the remaining features to the group B groups <- c(rep(\"A\", 2), rep(\"B\", nlyr(features) - 2))  # Build problem with robust min set objective p1 <-   problem(pu, features) %>%   add_robust_min_set_objective() %>%   add_constant_robust_constraints(groups = groups, conf_level = 0.4) %>%   add_binary_decisions() %>%   add_relative_targets(0.3) %>%   add_default_solver(verbose = FALSE)  # Build problem with robust min shortfall objective, # and budget set to 30% of the total cost of all planning units p2 <-   problem(pu, features) %>%   add_robust_min_shortfall_objective(     budget = terra::global(pu, \"sum\", na.rm = TRUE)[[1]] * 0.3   ) %>%   add_constant_robust_constraints(groups = groups, conf_level = 0.4) %>%   add_binary_decisions() %>%   add_relative_targets(0.3) %>%   add_default_solver(verbose = FALSE)  # Solve problems soln <- c(solve(p1), solve(p2)) names(soln) <- c(\"robust min set\", \"robust min shortfall\") plot(soln, axes = FALSE)  # }"},{"path":"https://frankiecho.github.io/robust.prioritizr/news/index.html","id":"robustprioritizr-0100","dir":"Changelog","previous_headings":"","what":"robust.prioritizr 0.1.0.0","title":"robust.prioritizr 0.1.0.0","text":"First stable release","code":""},{"path":"https://frankiecho.github.io/robust.prioritizr/news/index.html","id":"robustprioritizr-0001","dir":"Changelog","previous_headings":"","what":"robust.prioritizr 0.0.0.1","title":"robust.prioritizr 0.0.0.1","text":"Initial development version.","code":""}]
