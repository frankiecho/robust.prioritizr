% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_constant_robust_constraints.R
\name{add_constant_robust_constraints}
\alias{add_constant_robust_constraints}
\title{Add constant robust constraints}
\usage{
add_constant_robust_constraints(x, groups, conf_level = 1)
}
\arguments{
\item{x}{\code{\link[prioritizr:problem]{prioritizr::problem()}} object.}

\item{groups}{\code{character} vector indicating which features
should be grouped together for the purposes of characterizing uncertainty.
In particular, \code{groups} is used to specify a group name for each feature
and features with the same group name will be grouped together.
For example, if some of the features correspond to alternative predictions
for the same species under different scenarios, then these features should
have the same grouping name.}

\item{conf_level}{\code{numeric} value describing the level of robustness
required for the prioritization (ranging between 0 and 1). For instance, a value
of 0.95 guarantees that at least 95\% of the constraints will met for each
feature group. A value of 1 ensures full robustness, i.e., all constraints
are met. A value of 0 will cause none of the constraints to be applied,
and is thus not recommended.}
}
\value{
An updated \code{\link[prioritizr:problem]{prioritizr::problem()}} object with the constraint added
to it.
}
\description{
Add robust or probabilistic constraints to a conservation problem to ensure that
the priority areas are robust to uncertainty up to a certain confidence level. In particular, this
function is useful when the confidence level that the constraint is held
is constant across all features.
}
\section{Details}{

The robust/ chance constraints ensures that the proportion of constraints that are held
is greater than a specified \code{conf_level}. If \code{conf_level = 1},
all constraints within the feature group must be held, meaning that the solution is fully
robust to uncertainty. Lowering the \code{conf_level} to less thanuys
1 allows a certain percentage of the constraints for each feature group to be
violated, enabling the algorithm to search of solutions with better objective values, while
keeping the percentage of constraints violated less than \code{1 - conf_level}.
}

\section{Data requirements}{

The robust constraints require that you have multiple alternative
realizations for each biodiversity element of interest (e.g.,
species, ecosystems, ecosystem services). For example, we might have 5
species of interest. By applying different spatial modeling techniques,
we might have 10 different models for each of the 5 different species.
We can use these models to generate 10 alternative realizations
for each of the 5 species (yielding 50 alternative realizations in total).
To use these data, we would input these 50 alternative realizations
as 50 features when initializing a conservation planning problem
(i.e., \code{\link[prioritizr:problem]{prioritizr::problem()}}) and then use this function to specify which
of the of the features correspond to the same species (based on the feature
groupings parameter).
}

\examples{
\dontrun{
TODO.
}

}
\references{
Charnes, A., & Cooper, W. W. (1959). Chance-constrained programming. Management Science, 6(1), 73â€“79.
}
\seealso{
See \link{robust_objectives} for an overview of all functions for adding
robust objectives.
}
