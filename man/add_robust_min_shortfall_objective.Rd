% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_robust_min_shortfall_objective.R
\name{add_robust_min_shortfall_objective}
\alias{add_robust_min_shortfall_objective}
\title{Add robust minimum shortfall objective}
\usage{
add_robust_min_shortfall_objective(x, budget)
}
\arguments{
\item{x}{\code{\link[prioritizr:problem]{prioritizr::problem()}} object.}

\item{budget}{\code{numeric} value specifying the maximum expenditure of
the prioritization. For problems with multiple zones, the argument
to \code{budget} can be (i) a single \code{numeric} value to specify a single budget
for the entire solution or (ii) a \code{numeric} vector to specify
a separate budget for each management zone.}
}
\value{
An updated \code{\link[prioritizr:problem]{prioritizr::problem()}} object with the objective added
to it.
}
\description{
TODO.
}
\details{
TODO.
}
\section{Mathematical formulation}{

This objective can be expressed mathematically for a set of planning units
(\eqn{I}{I} indexed by \eqn{i}{i}), a set of features (\eqn{J}{J} indexed
by \eqn{j}{j}), and a set of realizations (\eqn{K}{K} indexed
by \eqn{k}{k}) as:

\deqn{\mathit{Minimize} \space  \sum_{j = 1}^{J} w_j y_j \\
\mathit{subject \space to} \\
\Pr_k\{\sum_{i = 1}^{I} x_i r_{ijk} + T_{j} y_j \geq T_j\} > \alpha \qquad \forall j \in J  \\
\sum_{i = 1}^{I} x_i c_i \leq B \\
y_j \geq v_{jk} \qquad \forall k \in K}{'
Minimize sum_j^J wj * yj subject to
sum_i^I (xi * rij) + tj * yj >= tj for all j in J &
sum_i^I (xi * ci) <= B
}

Here, \eqn{x_i}{xi} is the \link{decisions} variable (e.g.,
specifying whether planning unit \eqn{i}{i} has been selected (1) or not
(0)), \eqn{r_{ijk}}{rijk} is the amount of feature \eqn{j}{j} in planning
unit \eqn{i}{i} in realization \eqn{k}{k}, \eqn{t_j}{tj} is the maximum representation target for feature
\eqn{j}{j} across all realizations \eqn{k}{k}, i.e., \eqn{T_j = \max_k(t_{jk})},
\eqn{y_j}{yj} denotes the robust representation shortfall for
the target \eqn{t_j}{tj} for feature \eqn{j}{j} across all realizations \eqn{k}{k},
\eqn{v_{jk}}{vjk} is the shortfall for feature \eqn{j}{j} under realization \eqn{k}{k}, and \eqn{w_j}{wj} is the
weight for feature \eqn{j}{j} (defaults to 1 for all features; see
\code{\link[=add_feature_weights]{add_feature_weights()}} to specify weights). \eqn{\alpha}{\alpha} is the
specified \code{conf_level} confidence level for the uncertain constraint
(as specified in \verb{add_*_robust_constraints}), and ensures that the proportion of
constraints for each feature group \eqn{k}{k} that are held is higher than the
specified confidence level. Additionally,
\eqn{B}{B} is the budget allocated for the solution, \eqn{c_i}{ci} is the
cost of planning unit \eqn{i}{i}. Note that \eqn{y_j}{yj} is a continuous
variable bounded between zero and one, and denotes the shortfall
for target \eqn{j}{j} as a proportion of the total target.

If \code{conf_level = 1} (default), then the probabilistic constraint is simply represented
as:
\deqn{
\sum_{i = 1}^{I} x_i r_{ijk} + T_{j} y_j \geq T_j  \quad \forall \space j \in J, \space k \in K
}

If \code{conf_level < 1}, the probabilistic constraint is parameterised using a Chance Constraint Programming
approach by reformulating the constraint into the following series of constraints:
\deqn{
\sum_{i = 1}^{I} x_i r_{ijk} + T_j y_j + T_j m_{jk} \geq T_{j} \quad \forall \space j \in J, \space k \in K \\
\sum_{k = 1}^{K_j} m_{jk} / K_j \leq 1 - \alpha \quad \forall \space j \in J\\
m \in \{0, 1\}
}

where \eqn{m}{m} is a binary discrete variable indicating whether the constraint has been held or not, and
\eqn{K_j}{K_j} is the number of realizations for the feature \eqn{j}{j}. The auxiliary variable
\eqn{m}{m} is essentially a count of the number of times the probabilistic constraint
has been violated (if \eqn{m_{jk}=1}{m_{jk}=1}), and the problem ensures that the
total amount of times these are violated don't exceed \eqn{1-\alpha}{1-\alpha}.

The "Conditional Value-at-Risk" method found in \code{add_robust_min_set_objective} has not yet
been implemented in this objective function.
}

\examples{
\dontrun{
# load packages
library(prioritizr)
library(terra)

# create dummy data
# planning units
pu <- rast(matrix(1, 10, 10))

# 2 features with 3 scenarios each
features <- c(
  rast(matrix(rnorm(100, 1, 1), 10, 10)),
  rast(matrix(rnorm(100, 2, 1), 10, 10)),
  rast(matrix(rnorm(100, 3, 1), 10, 10)),
  rast(matrix(rnorm(100, 4, 1), 10, 10)),
  rast(matrix(rnorm(100, 5, 1), 10, 10)),
  rast(matrix(rnorm(100, 6, 1), 10, 10))
)
names(features) <- paste0("feature_", rep(1:2, each = 3), "_scenario_", 1:3)

# define groups for robust constraints
# each feature has 3 scenarios
groups <- rep(paste0("feature_", 1:2), each = 3)

# create problem with robust minimum shortfall objective
p <- problem(pu, features) \%>\%
  add_robust_min_shortfall_objective(budget = 5) \%>\%
  add_absolute_targets(2) \%>\%
  add_constant_robust_constraints(groups = groups)

# print problem
print(p)
}

}
\references{
Charnes, A., & Cooper, W. W. (1959). Chance-Constrained Programming. Management Science, 6(1), 73-79.
}
\seealso{
See \link{robust_objectives} for an overview of all functions for adding
robust objectives.

Other robust_objectives: 
\code{\link{add_robust_min_set_objective}()}
}
\concept{robust_objectives}
